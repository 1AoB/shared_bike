// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bike.proto

#ifndef PROTOBUF_INCLUDED_bike_2eproto
#define PROTOBUF_INCLUDED_bike_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_bike_2eproto 

namespace protobuf_bike_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[33];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_bike_2eproto
namespace tutorial {
class account_balance_request;
class account_balance_requestDefaultTypeInternal;
extern account_balance_requestDefaultTypeInternal _account_balance_request_default_instance_;
class account_balance_response;
class account_balance_responseDefaultTypeInternal;
extern account_balance_responseDefaultTypeInternal _account_balance_response_default_instance_;
class addBike_request;
class addBike_requestDefaultTypeInternal;
extern addBike_requestDefaultTypeInternal _addBike_request_default_instance_;
class addBike_response;
class addBike_responseDefaultTypeInternal;
extern addBike_responseDefaultTypeInternal _addBike_response_default_instance_;
class bike_fault_request;
class bike_fault_requestDefaultTypeInternal;
extern bike_fault_requestDefaultTypeInternal _bike_fault_request_default_instance_;
class bike_fault_response;
class bike_fault_responseDefaultTypeInternal;
extern bike_fault_responseDefaultTypeInternal _bike_fault_response_default_instance_;
class bike_repair_finish_request;
class bike_repair_finish_requestDefaultTypeInternal;
extern bike_repair_finish_requestDefaultTypeInternal _bike_repair_finish_request_default_instance_;
class bike_repair_finish_response;
class bike_repair_finish_responseDefaultTypeInternal;
extern bike_repair_finish_responseDefaultTypeInternal _bike_repair_finish_response_default_instance_;
class bike_scanQR_end_request;
class bike_scanQR_end_requestDefaultTypeInternal;
extern bike_scanQR_end_requestDefaultTypeInternal _bike_scanQR_end_request_default_instance_;
class bike_scanQR_end_response;
class bike_scanQR_end_responseDefaultTypeInternal;
extern bike_scanQR_end_responseDefaultTypeInternal _bike_scanQR_end_response_default_instance_;
class bike_scanQR_start_request;
class bike_scanQR_start_requestDefaultTypeInternal;
extern bike_scanQR_start_requestDefaultTypeInternal _bike_scanQR_start_request_default_instance_;
class bike_scanQR_start_response;
class bike_scanQR_start_responseDefaultTypeInternal;
extern bike_scanQR_start_responseDefaultTypeInternal _bike_scanQR_start_response_default_instance_;
class broadcast_msg_request;
class broadcast_msg_requestDefaultTypeInternal;
extern broadcast_msg_requestDefaultTypeInternal _broadcast_msg_request_default_instance_;
class broadcast_msg_response;
class broadcast_msg_responseDefaultTypeInternal;
extern broadcast_msg_responseDefaultTypeInternal _broadcast_msg_response_default_instance_;
class deleteBike_request;
class deleteBike_requestDefaultTypeInternal;
extern deleteBike_requestDefaultTypeInternal _deleteBike_request_default_instance_;
class deleteBike_response;
class deleteBike_responseDefaultTypeInternal;
extern deleteBike_responseDefaultTypeInternal _deleteBike_response_default_instance_;
class list_account_records_request;
class list_account_records_requestDefaultTypeInternal;
extern list_account_records_requestDefaultTypeInternal _list_account_records_request_default_instance_;
class list_account_records_response;
class list_account_records_responseDefaultTypeInternal;
extern list_account_records_responseDefaultTypeInternal _list_account_records_response_default_instance_;
class list_account_records_response_account_record;
class list_account_records_response_account_recordDefaultTypeInternal;
extern list_account_records_response_account_recordDefaultTypeInternal _list_account_records_response_account_record_default_instance_;
class list_all_bikeinfo_request;
class list_all_bikeinfo_requestDefaultTypeInternal;
extern list_all_bikeinfo_requestDefaultTypeInternal _list_all_bikeinfo_request_default_instance_;
class list_all_bikeinfo_response;
class list_all_bikeinfo_responseDefaultTypeInternal;
extern list_all_bikeinfo_responseDefaultTypeInternal _list_all_bikeinfo_response_default_instance_;
class list_all_bikeinfo_response_bikeinfo;
class list_all_bikeinfo_response_bikeinfoDefaultTypeInternal;
extern list_all_bikeinfo_response_bikeinfoDefaultTypeInternal _list_all_bikeinfo_response_bikeinfo_default_instance_;
class list_travel_records_request;
class list_travel_records_requestDefaultTypeInternal;
extern list_travel_records_requestDefaultTypeInternal _list_travel_records_request_default_instance_;
class list_travel_records_response;
class list_travel_records_responseDefaultTypeInternal;
extern list_travel_records_responseDefaultTypeInternal _list_travel_records_response_default_instance_;
class list_travel_records_response_travel_record;
class list_travel_records_response_travel_recordDefaultTypeInternal;
extern list_travel_records_response_travel_recordDefaultTypeInternal _list_travel_records_response_travel_record_default_instance_;
class login_request;
class login_requestDefaultTypeInternal;
extern login_requestDefaultTypeInternal _login_request_default_instance_;
class login_response;
class login_responseDefaultTypeInternal;
extern login_responseDefaultTypeInternal _login_response_default_instance_;
class mobile_request;
class mobile_requestDefaultTypeInternal;
extern mobile_requestDefaultTypeInternal _mobile_request_default_instance_;
class mobile_response;
class mobile_responseDefaultTypeInternal;
extern mobile_responseDefaultTypeInternal _mobile_response_default_instance_;
class recharge_request;
class recharge_requestDefaultTypeInternal;
extern recharge_requestDefaultTypeInternal _recharge_request_default_instance_;
class recharge_response;
class recharge_responseDefaultTypeInternal;
extern recharge_responseDefaultTypeInternal _recharge_response_default_instance_;
class registerUser_request;
class registerUser_requestDefaultTypeInternal;
extern registerUser_requestDefaultTypeInternal _registerUser_request_default_instance_;
class registerUser_response;
class registerUser_responseDefaultTypeInternal;
extern registerUser_responseDefaultTypeInternal _registerUser_response_default_instance_;
}  // namespace tutorial
namespace google {
namespace protobuf {
template<> ::tutorial::account_balance_request* Arena::CreateMaybeMessage<::tutorial::account_balance_request>(Arena*);
template<> ::tutorial::account_balance_response* Arena::CreateMaybeMessage<::tutorial::account_balance_response>(Arena*);
template<> ::tutorial::addBike_request* Arena::CreateMaybeMessage<::tutorial::addBike_request>(Arena*);
template<> ::tutorial::addBike_response* Arena::CreateMaybeMessage<::tutorial::addBike_response>(Arena*);
template<> ::tutorial::bike_fault_request* Arena::CreateMaybeMessage<::tutorial::bike_fault_request>(Arena*);
template<> ::tutorial::bike_fault_response* Arena::CreateMaybeMessage<::tutorial::bike_fault_response>(Arena*);
template<> ::tutorial::bike_repair_finish_request* Arena::CreateMaybeMessage<::tutorial::bike_repair_finish_request>(Arena*);
template<> ::tutorial::bike_repair_finish_response* Arena::CreateMaybeMessage<::tutorial::bike_repair_finish_response>(Arena*);
template<> ::tutorial::bike_scanQR_end_request* Arena::CreateMaybeMessage<::tutorial::bike_scanQR_end_request>(Arena*);
template<> ::tutorial::bike_scanQR_end_response* Arena::CreateMaybeMessage<::tutorial::bike_scanQR_end_response>(Arena*);
template<> ::tutorial::bike_scanQR_start_request* Arena::CreateMaybeMessage<::tutorial::bike_scanQR_start_request>(Arena*);
template<> ::tutorial::bike_scanQR_start_response* Arena::CreateMaybeMessage<::tutorial::bike_scanQR_start_response>(Arena*);
template<> ::tutorial::broadcast_msg_request* Arena::CreateMaybeMessage<::tutorial::broadcast_msg_request>(Arena*);
template<> ::tutorial::broadcast_msg_response* Arena::CreateMaybeMessage<::tutorial::broadcast_msg_response>(Arena*);
template<> ::tutorial::deleteBike_request* Arena::CreateMaybeMessage<::tutorial::deleteBike_request>(Arena*);
template<> ::tutorial::deleteBike_response* Arena::CreateMaybeMessage<::tutorial::deleteBike_response>(Arena*);
template<> ::tutorial::list_account_records_request* Arena::CreateMaybeMessage<::tutorial::list_account_records_request>(Arena*);
template<> ::tutorial::list_account_records_response* Arena::CreateMaybeMessage<::tutorial::list_account_records_response>(Arena*);
template<> ::tutorial::list_account_records_response_account_record* Arena::CreateMaybeMessage<::tutorial::list_account_records_response_account_record>(Arena*);
template<> ::tutorial::list_all_bikeinfo_request* Arena::CreateMaybeMessage<::tutorial::list_all_bikeinfo_request>(Arena*);
template<> ::tutorial::list_all_bikeinfo_response* Arena::CreateMaybeMessage<::tutorial::list_all_bikeinfo_response>(Arena*);
template<> ::tutorial::list_all_bikeinfo_response_bikeinfo* Arena::CreateMaybeMessage<::tutorial::list_all_bikeinfo_response_bikeinfo>(Arena*);
template<> ::tutorial::list_travel_records_request* Arena::CreateMaybeMessage<::tutorial::list_travel_records_request>(Arena*);
template<> ::tutorial::list_travel_records_response* Arena::CreateMaybeMessage<::tutorial::list_travel_records_response>(Arena*);
template<> ::tutorial::list_travel_records_response_travel_record* Arena::CreateMaybeMessage<::tutorial::list_travel_records_response_travel_record>(Arena*);
template<> ::tutorial::login_request* Arena::CreateMaybeMessage<::tutorial::login_request>(Arena*);
template<> ::tutorial::login_response* Arena::CreateMaybeMessage<::tutorial::login_response>(Arena*);
template<> ::tutorial::mobile_request* Arena::CreateMaybeMessage<::tutorial::mobile_request>(Arena*);
template<> ::tutorial::mobile_response* Arena::CreateMaybeMessage<::tutorial::mobile_response>(Arena*);
template<> ::tutorial::recharge_request* Arena::CreateMaybeMessage<::tutorial::recharge_request>(Arena*);
template<> ::tutorial::recharge_response* Arena::CreateMaybeMessage<::tutorial::recharge_response>(Arena*);
template<> ::tutorial::registerUser_request* Arena::CreateMaybeMessage<::tutorial::registerUser_request>(Arena*);
template<> ::tutorial::registerUser_response* Arena::CreateMaybeMessage<::tutorial::registerUser_response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tutorial {

// ===================================================================

class mobile_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.mobile_request) */ {
 public:
  mobile_request();
  virtual ~mobile_request();

  mobile_request(const mobile_request& from);

  inline mobile_request& operator=(const mobile_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mobile_request(mobile_request&& from) noexcept
    : mobile_request() {
    *this = ::std::move(from);
  }

  inline mobile_request& operator=(mobile_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mobile_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mobile_request* internal_default_instance() {
    return reinterpret_cast<const mobile_request*>(
               &_mobile_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(mobile_request* other);
  friend void swap(mobile_request& a, mobile_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mobile_request* New() const final {
    return CreateMaybeMessage<mobile_request>(NULL);
  }

  mobile_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mobile_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mobile_request& from);
  void MergeFrom(const mobile_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mobile_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:tutorial.mobile_request)
 private:
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class mobile_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.mobile_response) */ {
 public:
  mobile_response();
  virtual ~mobile_response();

  mobile_response(const mobile_response& from);

  inline mobile_response& operator=(const mobile_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mobile_response(mobile_response&& from) noexcept
    : mobile_response() {
    *this = ::std::move(from);
  }

  inline mobile_response& operator=(mobile_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mobile_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mobile_response* internal_default_instance() {
    return reinterpret_cast<const mobile_response*>(
               &_mobile_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(mobile_response* other);
  friend void swap(mobile_response& a, mobile_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mobile_response* New() const final {
    return CreateMaybeMessage<mobile_response>(NULL);
  }

  mobile_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mobile_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mobile_response& from);
  void MergeFrom(const mobile_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mobile_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required int32 resCode = 1;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 1;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // required int32 verCode = 2;
  bool has_vercode() const;
  void clear_vercode();
  static const int kVerCodeFieldNumber = 2;
  ::google::protobuf::int32 vercode() const;
  void set_vercode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.mobile_response)
 private:
  void set_has_rescode();
  void clear_has_rescode();
  void set_has_vercode();
  void clear_has_vercode();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 rescode_;
  ::google::protobuf::int32 vercode_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class addBike_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.addBike_request) */ {
 public:
  addBike_request();
  virtual ~addBike_request();

  addBike_request(const addBike_request& from);

  inline addBike_request& operator=(const addBike_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  addBike_request(addBike_request&& from) noexcept
    : addBike_request() {
    *this = ::std::move(from);
  }

  inline addBike_request& operator=(addBike_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const addBike_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addBike_request* internal_default_instance() {
    return reinterpret_cast<const addBike_request*>(
               &_addBike_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(addBike_request* other);
  friend void swap(addBike_request& a, addBike_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline addBike_request* New() const final {
    return CreateMaybeMessage<addBike_request>(NULL);
  }

  addBike_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<addBike_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const addBike_request& from);
  void MergeFrom(const addBike_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addBike_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // required double latitude = 3;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  double latitude() const;
  void set_latitude(double value);

  // required int32 bikeId = 1;
  bool has_bikeid() const;
  void clear_bikeid();
  static const int kBikeIdFieldNumber = 1;
  ::google::protobuf::int32 bikeid() const;
  void set_bikeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.addBike_request)
 private:
  void set_has_bikeid();
  void clear_has_bikeid();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double longitude_;
  double latitude_;
  ::google::protobuf::int32 bikeid_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class addBike_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.addBike_response) */ {
 public:
  addBike_response();
  virtual ~addBike_response();

  addBike_response(const addBike_response& from);

  inline addBike_response& operator=(const addBike_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  addBike_response(addBike_response&& from) noexcept
    : addBike_response() {
    *this = ::std::move(from);
  }

  inline addBike_response& operator=(addBike_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const addBike_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addBike_response* internal_default_instance() {
    return reinterpret_cast<const addBike_response*>(
               &_addBike_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(addBike_response* other);
  friend void swap(addBike_response& a, addBike_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline addBike_response* New() const final {
    return CreateMaybeMessage<addBike_response>(NULL);
  }

  addBike_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<addBike_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const addBike_response& from);
  void MergeFrom(const addBike_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addBike_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // required int32 bikeId = 1;
  bool has_bikeid() const;
  void clear_bikeid();
  static const int kBikeIdFieldNumber = 1;
  ::google::protobuf::int32 bikeid() const;
  void set_bikeid(::google::protobuf::int32 value);

  // required int32 resCode = 4;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 4;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // required double latitude = 3;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  double latitude() const;
  void set_latitude(double value);

  // @@protoc_insertion_point(class_scope:tutorial.addBike_response)
 private:
  void set_has_bikeid();
  void clear_has_bikeid();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_rescode();
  void clear_has_rescode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double longitude_;
  ::google::protobuf::int32 bikeid_;
  ::google::protobuf::int32 rescode_;
  double latitude_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class deleteBike_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.deleteBike_request) */ {
 public:
  deleteBike_request();
  virtual ~deleteBike_request();

  deleteBike_request(const deleteBike_request& from);

  inline deleteBike_request& operator=(const deleteBike_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  deleteBike_request(deleteBike_request&& from) noexcept
    : deleteBike_request() {
    *this = ::std::move(from);
  }

  inline deleteBike_request& operator=(deleteBike_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const deleteBike_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const deleteBike_request* internal_default_instance() {
    return reinterpret_cast<const deleteBike_request*>(
               &_deleteBike_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(deleteBike_request* other);
  friend void swap(deleteBike_request& a, deleteBike_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline deleteBike_request* New() const final {
    return CreateMaybeMessage<deleteBike_request>(NULL);
  }

  deleteBike_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<deleteBike_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const deleteBike_request& from);
  void MergeFrom(const deleteBike_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteBike_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bikeId = 1;
  bool has_bikeid() const;
  void clear_bikeid();
  static const int kBikeIdFieldNumber = 1;
  ::google::protobuf::int32 bikeid() const;
  void set_bikeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.deleteBike_request)
 private:
  void set_has_bikeid();
  void clear_has_bikeid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 bikeid_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class deleteBike_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.deleteBike_response) */ {
 public:
  deleteBike_response();
  virtual ~deleteBike_response();

  deleteBike_response(const deleteBike_response& from);

  inline deleteBike_response& operator=(const deleteBike_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  deleteBike_response(deleteBike_response&& from) noexcept
    : deleteBike_response() {
    *this = ::std::move(from);
  }

  inline deleteBike_response& operator=(deleteBike_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const deleteBike_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const deleteBike_response* internal_default_instance() {
    return reinterpret_cast<const deleteBike_response*>(
               &_deleteBike_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(deleteBike_response* other);
  friend void swap(deleteBike_response& a, deleteBike_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline deleteBike_response* New() const final {
    return CreateMaybeMessage<deleteBike_response>(NULL);
  }

  deleteBike_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<deleteBike_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const deleteBike_response& from);
  void MergeFrom(const deleteBike_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteBike_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bikeId = 1;
  bool has_bikeid() const;
  void clear_bikeid();
  static const int kBikeIdFieldNumber = 1;
  ::google::protobuf::int32 bikeid() const;
  void set_bikeid(::google::protobuf::int32 value);

  // required int32 resCode = 2;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 2;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.deleteBike_response)
 private:
  void set_has_bikeid();
  void clear_has_bikeid();
  void set_has_rescode();
  void clear_has_rescode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 bikeid_;
  ::google::protobuf::int32 rescode_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class registerUser_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.registerUser_request) */ {
 public:
  registerUser_request();
  virtual ~registerUser_request();

  registerUser_request(const registerUser_request& from);

  inline registerUser_request& operator=(const registerUser_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  registerUser_request(registerUser_request&& from) noexcept
    : registerUser_request() {
    *this = ::std::move(from);
  }

  inline registerUser_request& operator=(registerUser_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const registerUser_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registerUser_request* internal_default_instance() {
    return reinterpret_cast<const registerUser_request*>(
               &_registerUser_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(registerUser_request* other);
  friend void swap(registerUser_request& a, registerUser_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline registerUser_request* New() const final {
    return CreateMaybeMessage<registerUser_request>(NULL);
  }

  registerUser_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<registerUser_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const registerUser_request& from);
  void MergeFrom(const registerUser_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerUser_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required string userPwd = 2;
  bool has_userpwd() const;
  void clear_userpwd();
  static const int kUserPwdFieldNumber = 2;
  const ::std::string& userpwd() const;
  void set_userpwd(const ::std::string& value);
  #if LANG_CXX11
  void set_userpwd(::std::string&& value);
  #endif
  void set_userpwd(const char* value);
  void set_userpwd(const char* value, size_t size);
  ::std::string* mutable_userpwd();
  ::std::string* release_userpwd();
  void set_allocated_userpwd(::std::string* userpwd);

  // required int32 verCode = 3;
  bool has_vercode() const;
  void clear_vercode();
  static const int kVerCodeFieldNumber = 3;
  ::google::protobuf::int32 vercode() const;
  void set_vercode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.registerUser_request)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_userpwd();
  void clear_has_userpwd();
  void set_has_vercode();
  void clear_has_vercode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr userpwd_;
  ::google::protobuf::int32 vercode_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class registerUser_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.registerUser_response) */ {
 public:
  registerUser_response();
  virtual ~registerUser_response();

  registerUser_response(const registerUser_response& from);

  inline registerUser_response& operator=(const registerUser_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  registerUser_response(registerUser_response&& from) noexcept
    : registerUser_response() {
    *this = ::std::move(from);
  }

  inline registerUser_response& operator=(registerUser_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const registerUser_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registerUser_response* internal_default_instance() {
    return reinterpret_cast<const registerUser_response*>(
               &_registerUser_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(registerUser_response* other);
  friend void swap(registerUser_response& a, registerUser_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline registerUser_response* New() const final {
    return CreateMaybeMessage<registerUser_response>(NULL);
  }

  registerUser_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<registerUser_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const registerUser_response& from);
  void MergeFrom(const registerUser_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerUser_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required string userPwd = 2;
  bool has_userpwd() const;
  void clear_userpwd();
  static const int kUserPwdFieldNumber = 2;
  const ::std::string& userpwd() const;
  void set_userpwd(const ::std::string& value);
  #if LANG_CXX11
  void set_userpwd(::std::string&& value);
  #endif
  void set_userpwd(const char* value);
  void set_userpwd(const char* value, size_t size);
  ::std::string* mutable_userpwd();
  ::std::string* release_userpwd();
  void set_allocated_userpwd(::std::string* userpwd);

  // optional int32 verCode = 3;
  bool has_vercode() const;
  void clear_vercode();
  static const int kVerCodeFieldNumber = 3;
  ::google::protobuf::int32 vercode() const;
  void set_vercode(::google::protobuf::int32 value);

  // required int32 resCode = 4;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 4;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.registerUser_response)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_userpwd();
  void clear_has_userpwd();
  void set_has_vercode();
  void clear_has_vercode();
  void set_has_rescode();
  void clear_has_rescode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr userpwd_;
  ::google::protobuf::int32 vercode_;
  ::google::protobuf::int32 rescode_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class login_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.login_request) */ {
 public:
  login_request();
  virtual ~login_request();

  login_request(const login_request& from);

  inline login_request& operator=(const login_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  login_request(login_request&& from) noexcept
    : login_request() {
    *this = ::std::move(from);
  }

  inline login_request& operator=(login_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_request* internal_default_instance() {
    return reinterpret_cast<const login_request*>(
               &_login_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(login_request* other);
  friend void swap(login_request& a, login_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline login_request* New() const final {
    return CreateMaybeMessage<login_request>(NULL);
  }

  login_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<login_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const login_request& from);
  void MergeFrom(const login_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required string userPwd = 2;
  bool has_userpwd() const;
  void clear_userpwd();
  static const int kUserPwdFieldNumber = 2;
  const ::std::string& userpwd() const;
  void set_userpwd(const ::std::string& value);
  #if LANG_CXX11
  void set_userpwd(::std::string&& value);
  #endif
  void set_userpwd(const char* value);
  void set_userpwd(const char* value, size_t size);
  ::std::string* mutable_userpwd();
  ::std::string* release_userpwd();
  void set_allocated_userpwd(::std::string* userpwd);

  // @@protoc_insertion_point(class_scope:tutorial.login_request)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_userpwd();
  void clear_has_userpwd();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr userpwd_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class login_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.login_response) */ {
 public:
  login_response();
  virtual ~login_response();

  login_response(const login_response& from);

  inline login_response& operator=(const login_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  login_response(login_response&& from) noexcept
    : login_response() {
    *this = ::std::move(from);
  }

  inline login_response& operator=(login_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_response* internal_default_instance() {
    return reinterpret_cast<const login_response*>(
               &_login_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(login_response* other);
  friend void swap(login_response& a, login_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline login_response* New() const final {
    return CreateMaybeMessage<login_response>(NULL);
  }

  login_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<login_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const login_response& from);
  void MergeFrom(const login_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required string userPwd = 3;
  bool has_userpwd() const;
  void clear_userpwd();
  static const int kUserPwdFieldNumber = 3;
  const ::std::string& userpwd() const;
  void set_userpwd(const ::std::string& value);
  #if LANG_CXX11
  void set_userpwd(::std::string&& value);
  #endif
  void set_userpwd(const char* value);
  void set_userpwd(const char* value, size_t size);
  ::std::string* mutable_userpwd();
  ::std::string* release_userpwd();
  void set_allocated_userpwd(::std::string* userpwd);

  // required int32 resCode = 1;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 1;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // optional int32 userLevel = 4;
  bool has_userlevel() const;
  void clear_userlevel();
  static const int kUserLevelFieldNumber = 4;
  ::google::protobuf::int32 userlevel() const;
  void set_userlevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.login_response)
 private:
  void set_has_rescode();
  void clear_has_rescode();
  void set_has_username();
  void clear_has_username();
  void set_has_userpwd();
  void clear_has_userpwd();
  void set_has_userlevel();
  void clear_has_userlevel();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr userpwd_;
  ::google::protobuf::int32 rescode_;
  ::google::protobuf::int32 userlevel_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class recharge_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.recharge_request) */ {
 public:
  recharge_request();
  virtual ~recharge_request();

  recharge_request(const recharge_request& from);

  inline recharge_request& operator=(const recharge_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  recharge_request(recharge_request&& from) noexcept
    : recharge_request() {
    *this = ::std::move(from);
  }

  inline recharge_request& operator=(recharge_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const recharge_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const recharge_request* internal_default_instance() {
    return reinterpret_cast<const recharge_request*>(
               &_recharge_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(recharge_request* other);
  friend void swap(recharge_request& a, recharge_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline recharge_request* New() const final {
    return CreateMaybeMessage<recharge_request>(NULL);
  }

  recharge_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<recharge_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const recharge_request& from);
  void MergeFrom(const recharge_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recharge_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required int32 amount = 2;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int32 amount() const;
  void set_amount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.recharge_request)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_amount();
  void clear_has_amount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 amount_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class recharge_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.recharge_response) */ {
 public:
  recharge_response();
  virtual ~recharge_response();

  recharge_response(const recharge_response& from);

  inline recharge_response& operator=(const recharge_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  recharge_response(recharge_response&& from) noexcept
    : recharge_response() {
    *this = ::std::move(from);
  }

  inline recharge_response& operator=(recharge_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const recharge_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const recharge_response* internal_default_instance() {
    return reinterpret_cast<const recharge_response*>(
               &_recharge_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(recharge_response* other);
  friend void swap(recharge_response& a, recharge_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline recharge_response* New() const final {
    return CreateMaybeMessage<recharge_response>(NULL);
  }

  recharge_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<recharge_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const recharge_response& from);
  void MergeFrom(const recharge_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recharge_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string desc = 2;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // required int32 resCode = 1;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 1;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // required int32 balance = 3;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 3;
  ::google::protobuf::int32 balance() const;
  void set_balance(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.recharge_response)
 private:
  void set_has_rescode();
  void clear_has_rescode();
  void set_has_desc();
  void clear_has_desc();
  void set_has_balance();
  void clear_has_balance();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::int32 rescode_;
  ::google::protobuf::int32 balance_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class account_balance_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.account_balance_request) */ {
 public:
  account_balance_request();
  virtual ~account_balance_request();

  account_balance_request(const account_balance_request& from);

  inline account_balance_request& operator=(const account_balance_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  account_balance_request(account_balance_request&& from) noexcept
    : account_balance_request() {
    *this = ::std::move(from);
  }

  inline account_balance_request& operator=(account_balance_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const account_balance_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const account_balance_request* internal_default_instance() {
    return reinterpret_cast<const account_balance_request*>(
               &_account_balance_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(account_balance_request* other);
  friend void swap(account_balance_request& a, account_balance_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline account_balance_request* New() const final {
    return CreateMaybeMessage<account_balance_request>(NULL);
  }

  account_balance_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<account_balance_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const account_balance_request& from);
  void MergeFrom(const account_balance_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(account_balance_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:tutorial.account_balance_request)
 private:
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class account_balance_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.account_balance_response) */ {
 public:
  account_balance_response();
  virtual ~account_balance_response();

  account_balance_response(const account_balance_response& from);

  inline account_balance_response& operator=(const account_balance_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  account_balance_response(account_balance_response&& from) noexcept
    : account_balance_response() {
    *this = ::std::move(from);
  }

  inline account_balance_response& operator=(account_balance_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const account_balance_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const account_balance_response* internal_default_instance() {
    return reinterpret_cast<const account_balance_response*>(
               &_account_balance_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(account_balance_response* other);
  friend void swap(account_balance_response& a, account_balance_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline account_balance_response* New() const final {
    return CreateMaybeMessage<account_balance_response>(NULL);
  }

  account_balance_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<account_balance_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const account_balance_response& from);
  void MergeFrom(const account_balance_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(account_balance_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string desc = 2;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // required int32 resCode = 1;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 1;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // required int32 balance = 3;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 3;
  ::google::protobuf::int32 balance() const;
  void set_balance(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.account_balance_response)
 private:
  void set_has_rescode();
  void clear_has_rescode();
  void set_has_desc();
  void clear_has_desc();
  void set_has_balance();
  void clear_has_balance();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::int32 rescode_;
  ::google::protobuf::int32 balance_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class broadcast_msg_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.broadcast_msg_request) */ {
 public:
  broadcast_msg_request();
  virtual ~broadcast_msg_request();

  broadcast_msg_request(const broadcast_msg_request& from);

  inline broadcast_msg_request& operator=(const broadcast_msg_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  broadcast_msg_request(broadcast_msg_request&& from) noexcept
    : broadcast_msg_request() {
    *this = ::std::move(from);
  }

  inline broadcast_msg_request& operator=(broadcast_msg_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const broadcast_msg_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const broadcast_msg_request* internal_default_instance() {
    return reinterpret_cast<const broadcast_msg_request*>(
               &_broadcast_msg_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(broadcast_msg_request* other);
  friend void swap(broadcast_msg_request& a, broadcast_msg_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline broadcast_msg_request* New() const final {
    return CreateMaybeMessage<broadcast_msg_request>(NULL);
  }

  broadcast_msg_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<broadcast_msg_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const broadcast_msg_request& from);
  void MergeFrom(const broadcast_msg_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(broadcast_msg_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bikeId = 1;
  bool has_bikeid() const;
  void clear_bikeid();
  static const int kBikeIdFieldNumber = 1;
  ::google::protobuf::int32 bikeid() const;
  void set_bikeid(::google::protobuf::int32 value);

  // required int32 bikeStatus = 2;
  bool has_bikestatus() const;
  void clear_bikestatus();
  static const int kBikeStatusFieldNumber = 2;
  ::google::protobuf::int32 bikestatus() const;
  void set_bikestatus(::google::protobuf::int32 value);

  // required double longitude = 3;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  double longitude() const;
  void set_longitude(double value);

  // required double latitude = 4;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  double latitude() const;
  void set_latitude(double value);

  // @@protoc_insertion_point(class_scope:tutorial.broadcast_msg_request)
 private:
  void set_has_bikeid();
  void clear_has_bikeid();
  void set_has_bikestatus();
  void clear_has_bikestatus();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 bikeid_;
  ::google::protobuf::int32 bikestatus_;
  double longitude_;
  double latitude_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class broadcast_msg_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.broadcast_msg_response) */ {
 public:
  broadcast_msg_response();
  virtual ~broadcast_msg_response();

  broadcast_msg_response(const broadcast_msg_response& from);

  inline broadcast_msg_response& operator=(const broadcast_msg_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  broadcast_msg_response(broadcast_msg_response&& from) noexcept
    : broadcast_msg_response() {
    *this = ::std::move(from);
  }

  inline broadcast_msg_response& operator=(broadcast_msg_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const broadcast_msg_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const broadcast_msg_response* internal_default_instance() {
    return reinterpret_cast<const broadcast_msg_response*>(
               &_broadcast_msg_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(broadcast_msg_response* other);
  friend void swap(broadcast_msg_response& a, broadcast_msg_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline broadcast_msg_response* New() const final {
    return CreateMaybeMessage<broadcast_msg_response>(NULL);
  }

  broadcast_msg_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<broadcast_msg_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const broadcast_msg_response& from);
  void MergeFrom(const broadcast_msg_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(broadcast_msg_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bikeId = 1;
  bool has_bikeid() const;
  void clear_bikeid();
  static const int kBikeIdFieldNumber = 1;
  ::google::protobuf::int32 bikeid() const;
  void set_bikeid(::google::protobuf::int32 value);

  // required int32 bikeStatus = 2;
  bool has_bikestatus() const;
  void clear_bikestatus();
  static const int kBikeStatusFieldNumber = 2;
  ::google::protobuf::int32 bikestatus() const;
  void set_bikestatus(::google::protobuf::int32 value);

  // required double longitude = 3;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  double longitude() const;
  void set_longitude(double value);

  // required double latitude = 4;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  double latitude() const;
  void set_latitude(double value);

  // @@protoc_insertion_point(class_scope:tutorial.broadcast_msg_response)
 private:
  void set_has_bikeid();
  void clear_has_bikeid();
  void set_has_bikestatus();
  void clear_has_bikestatus();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 bikeid_;
  ::google::protobuf::int32 bikestatus_;
  double longitude_;
  double latitude_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bike_scanQR_start_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.bike_scanQR_start_request) */ {
 public:
  bike_scanQR_start_request();
  virtual ~bike_scanQR_start_request();

  bike_scanQR_start_request(const bike_scanQR_start_request& from);

  inline bike_scanQR_start_request& operator=(const bike_scanQR_start_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bike_scanQR_start_request(bike_scanQR_start_request&& from) noexcept
    : bike_scanQR_start_request() {
    *this = ::std::move(from);
  }

  inline bike_scanQR_start_request& operator=(bike_scanQR_start_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bike_scanQR_start_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bike_scanQR_start_request* internal_default_instance() {
    return reinterpret_cast<const bike_scanQR_start_request*>(
               &_bike_scanQR_start_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(bike_scanQR_start_request* other);
  friend void swap(bike_scanQR_start_request& a, bike_scanQR_start_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bike_scanQR_start_request* New() const final {
    return CreateMaybeMessage<bike_scanQR_start_request>(NULL);
  }

  bike_scanQR_start_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bike_scanQR_start_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bike_scanQR_start_request& from);
  void MergeFrom(const bike_scanQR_start_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bike_scanQR_start_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required uint64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // required double longitude = 4;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  double longitude() const;
  void set_longitude(double value);

  // required double latitude = 5;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 5;
  double latitude() const;
  void set_latitude(double value);

  // required int32 bikeId = 2;
  bool has_bikeid() const;
  void clear_bikeid();
  static const int kBikeIdFieldNumber = 2;
  ::google::protobuf::int32 bikeid() const;
  void set_bikeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.bike_scanQR_start_request)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_bikeid();
  void clear_has_bikeid();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::uint64 timestamp_;
  double longitude_;
  double latitude_;
  ::google::protobuf::int32 bikeid_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bike_scanQR_start_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.bike_scanQR_start_response) */ {
 public:
  bike_scanQR_start_response();
  virtual ~bike_scanQR_start_response();

  bike_scanQR_start_response(const bike_scanQR_start_response& from);

  inline bike_scanQR_start_response& operator=(const bike_scanQR_start_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bike_scanQR_start_response(bike_scanQR_start_response&& from) noexcept
    : bike_scanQR_start_response() {
    *this = ::std::move(from);
  }

  inline bike_scanQR_start_response& operator=(bike_scanQR_start_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bike_scanQR_start_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bike_scanQR_start_response* internal_default_instance() {
    return reinterpret_cast<const bike_scanQR_start_response*>(
               &_bike_scanQR_start_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(bike_scanQR_start_response* other);
  friend void swap(bike_scanQR_start_response& a, bike_scanQR_start_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bike_scanQR_start_response* New() const final {
    return CreateMaybeMessage<bike_scanQR_start_response>(NULL);
  }

  bike_scanQR_start_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bike_scanQR_start_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bike_scanQR_start_response& from);
  void MergeFrom(const bike_scanQR_start_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bike_scanQR_start_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // required double longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // required double latitude = 3;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  double latitude() const;
  void set_latitude(double value);

  // required int32 resCode = 4;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 4;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.bike_scanQR_start_response)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_rescode();
  void clear_has_rescode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 timestamp_;
  double longitude_;
  double latitude_;
  ::google::protobuf::int32 rescode_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bike_scanQR_end_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.bike_scanQR_end_request) */ {
 public:
  bike_scanQR_end_request();
  virtual ~bike_scanQR_end_request();

  bike_scanQR_end_request(const bike_scanQR_end_request& from);

  inline bike_scanQR_end_request& operator=(const bike_scanQR_end_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bike_scanQR_end_request(bike_scanQR_end_request&& from) noexcept
    : bike_scanQR_end_request() {
    *this = ::std::move(from);
  }

  inline bike_scanQR_end_request& operator=(bike_scanQR_end_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bike_scanQR_end_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bike_scanQR_end_request* internal_default_instance() {
    return reinterpret_cast<const bike_scanQR_end_request*>(
               &_bike_scanQR_end_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(bike_scanQR_end_request* other);
  friend void swap(bike_scanQR_end_request& a, bike_scanQR_end_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bike_scanQR_end_request* New() const final {
    return CreateMaybeMessage<bike_scanQR_end_request>(NULL);
  }

  bike_scanQR_end_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bike_scanQR_end_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bike_scanQR_end_request& from);
  void MergeFrom(const bike_scanQR_end_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bike_scanQR_end_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required uint64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // required double longitude = 4;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  double longitude() const;
  void set_longitude(double value);

  // required double latitude = 5;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 5;
  double latitude() const;
  void set_latitude(double value);

  // required int32 bikeId = 2;
  bool has_bikeid() const;
  void clear_bikeid();
  static const int kBikeIdFieldNumber = 2;
  ::google::protobuf::int32 bikeid() const;
  void set_bikeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.bike_scanQR_end_request)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_bikeid();
  void clear_has_bikeid();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::uint64 timestamp_;
  double longitude_;
  double latitude_;
  ::google::protobuf::int32 bikeid_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bike_scanQR_end_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.bike_scanQR_end_response) */ {
 public:
  bike_scanQR_end_response();
  virtual ~bike_scanQR_end_response();

  bike_scanQR_end_response(const bike_scanQR_end_response& from);

  inline bike_scanQR_end_response& operator=(const bike_scanQR_end_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bike_scanQR_end_response(bike_scanQR_end_response&& from) noexcept
    : bike_scanQR_end_response() {
    *this = ::std::move(from);
  }

  inline bike_scanQR_end_response& operator=(bike_scanQR_end_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bike_scanQR_end_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bike_scanQR_end_response* internal_default_instance() {
    return reinterpret_cast<const bike_scanQR_end_response*>(
               &_bike_scanQR_end_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(bike_scanQR_end_response* other);
  friend void swap(bike_scanQR_end_response& a, bike_scanQR_end_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bike_scanQR_end_response* New() const final {
    return CreateMaybeMessage<bike_scanQR_end_response>(NULL);
  }

  bike_scanQR_end_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bike_scanQR_end_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bike_scanQR_end_response& from);
  void MergeFrom(const bike_scanQR_end_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bike_scanQR_end_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 consume = 1;
  bool has_consume() const;
  void clear_consume();
  static const int kConsumeFieldNumber = 1;
  ::google::protobuf::int32 consume() const;
  void set_consume(::google::protobuf::int32 value);

  // required int32 balance = 2;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 2;
  ::google::protobuf::int32 balance() const;
  void set_balance(::google::protobuf::int32 value);

  // required uint64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // required double longitude = 4;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  double longitude() const;
  void set_longitude(double value);

  // required double latitude = 5;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 5;
  double latitude() const;
  void set_latitude(double value);

  // required int32 resCode = 6;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 6;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.bike_scanQR_end_response)
 private:
  void set_has_consume();
  void clear_has_consume();
  void set_has_balance();
  void clear_has_balance();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_rescode();
  void clear_has_rescode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 consume_;
  ::google::protobuf::int32 balance_;
  ::google::protobuf::uint64 timestamp_;
  double longitude_;
  double latitude_;
  ::google::protobuf::int32 rescode_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bike_fault_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.bike_fault_request) */ {
 public:
  bike_fault_request();
  virtual ~bike_fault_request();

  bike_fault_request(const bike_fault_request& from);

  inline bike_fault_request& operator=(const bike_fault_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bike_fault_request(bike_fault_request&& from) noexcept
    : bike_fault_request() {
    *this = ::std::move(from);
  }

  inline bike_fault_request& operator=(bike_fault_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bike_fault_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bike_fault_request* internal_default_instance() {
    return reinterpret_cast<const bike_fault_request*>(
               &_bike_fault_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(bike_fault_request* other);
  friend void swap(bike_fault_request& a, bike_fault_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bike_fault_request* New() const final {
    return CreateMaybeMessage<bike_fault_request>(NULL);
  }

  bike_fault_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bike_fault_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bike_fault_request& from);
  void MergeFrom(const bike_fault_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bike_fault_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required uint64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // required double longitude = 4;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  double longitude() const;
  void set_longitude(double value);

  // required double latitude = 5;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 5;
  double latitude() const;
  void set_latitude(double value);

  // required uint32 bike_id = 2;
  bool has_bike_id() const;
  void clear_bike_id();
  static const int kBikeIdFieldNumber = 2;
  ::google::protobuf::uint32 bike_id() const;
  void set_bike_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tutorial.bike_fault_request)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_bike_id();
  void clear_has_bike_id();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::uint64 timestamp_;
  double longitude_;
  double latitude_;
  ::google::protobuf::uint32 bike_id_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bike_fault_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.bike_fault_response) */ {
 public:
  bike_fault_response();
  virtual ~bike_fault_response();

  bike_fault_response(const bike_fault_response& from);

  inline bike_fault_response& operator=(const bike_fault_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bike_fault_response(bike_fault_response&& from) noexcept
    : bike_fault_response() {
    *this = ::std::move(from);
  }

  inline bike_fault_response& operator=(bike_fault_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bike_fault_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bike_fault_response* internal_default_instance() {
    return reinterpret_cast<const bike_fault_response*>(
               &_bike_fault_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(bike_fault_response* other);
  friend void swap(bike_fault_response& a, bike_fault_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bike_fault_response* New() const final {
    return CreateMaybeMessage<bike_fault_response>(NULL);
  }

  bike_fault_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bike_fault_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bike_fault_response& from);
  void MergeFrom(const bike_fault_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bike_fault_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 resCode = 1;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 1;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.bike_fault_response)
 private:
  void set_has_rescode();
  void clear_has_rescode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 rescode_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bike_repair_finish_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.bike_repair_finish_request) */ {
 public:
  bike_repair_finish_request();
  virtual ~bike_repair_finish_request();

  bike_repair_finish_request(const bike_repair_finish_request& from);

  inline bike_repair_finish_request& operator=(const bike_repair_finish_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bike_repair_finish_request(bike_repair_finish_request&& from) noexcept
    : bike_repair_finish_request() {
    *this = ::std::move(from);
  }

  inline bike_repair_finish_request& operator=(bike_repair_finish_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bike_repair_finish_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bike_repair_finish_request* internal_default_instance() {
    return reinterpret_cast<const bike_repair_finish_request*>(
               &_bike_repair_finish_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(bike_repair_finish_request* other);
  friend void swap(bike_repair_finish_request& a, bike_repair_finish_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bike_repair_finish_request* New() const final {
    return CreateMaybeMessage<bike_repair_finish_request>(NULL);
  }

  bike_repair_finish_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bike_repair_finish_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bike_repair_finish_request& from);
  void MergeFrom(const bike_repair_finish_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bike_repair_finish_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required uint64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // required double longitude = 4;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  double longitude() const;
  void set_longitude(double value);

  // required double latitude = 5;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 5;
  double latitude() const;
  void set_latitude(double value);

  // required uint32 bike_id = 2;
  bool has_bike_id() const;
  void clear_bike_id();
  static const int kBikeIdFieldNumber = 2;
  ::google::protobuf::uint32 bike_id() const;
  void set_bike_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tutorial.bike_repair_finish_request)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_bike_id();
  void clear_has_bike_id();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::uint64 timestamp_;
  double longitude_;
  double latitude_;
  ::google::protobuf::uint32 bike_id_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bike_repair_finish_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.bike_repair_finish_response) */ {
 public:
  bike_repair_finish_response();
  virtual ~bike_repair_finish_response();

  bike_repair_finish_response(const bike_repair_finish_response& from);

  inline bike_repair_finish_response& operator=(const bike_repair_finish_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bike_repair_finish_response(bike_repair_finish_response&& from) noexcept
    : bike_repair_finish_response() {
    *this = ::std::move(from);
  }

  inline bike_repair_finish_response& operator=(bike_repair_finish_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bike_repair_finish_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bike_repair_finish_response* internal_default_instance() {
    return reinterpret_cast<const bike_repair_finish_response*>(
               &_bike_repair_finish_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(bike_repair_finish_response* other);
  friend void swap(bike_repair_finish_response& a, bike_repair_finish_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bike_repair_finish_response* New() const final {
    return CreateMaybeMessage<bike_repair_finish_response>(NULL);
  }

  bike_repair_finish_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bike_repair_finish_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bike_repair_finish_response& from);
  void MergeFrom(const bike_repair_finish_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bike_repair_finish_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 resCode = 1;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 1;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.bike_repair_finish_response)
 private:
  void set_has_rescode();
  void clear_has_rescode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 rescode_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class list_all_bikeinfo_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.list_all_bikeinfo_request) */ {
 public:
  list_all_bikeinfo_request();
  virtual ~list_all_bikeinfo_request();

  list_all_bikeinfo_request(const list_all_bikeinfo_request& from);

  inline list_all_bikeinfo_request& operator=(const list_all_bikeinfo_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  list_all_bikeinfo_request(list_all_bikeinfo_request&& from) noexcept
    : list_all_bikeinfo_request() {
    *this = ::std::move(from);
  }

  inline list_all_bikeinfo_request& operator=(list_all_bikeinfo_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_all_bikeinfo_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const list_all_bikeinfo_request* internal_default_instance() {
    return reinterpret_cast<const list_all_bikeinfo_request*>(
               &_list_all_bikeinfo_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(list_all_bikeinfo_request* other);
  friend void swap(list_all_bikeinfo_request& a, list_all_bikeinfo_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline list_all_bikeinfo_request* New() const final {
    return CreateMaybeMessage<list_all_bikeinfo_request>(NULL);
  }

  list_all_bikeinfo_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<list_all_bikeinfo_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const list_all_bikeinfo_request& from);
  void MergeFrom(const list_all_bikeinfo_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(list_all_bikeinfo_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:tutorial.list_all_bikeinfo_request)
 private:
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class list_all_bikeinfo_response_bikeinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.list_all_bikeinfo_response.bikeinfo) */ {
 public:
  list_all_bikeinfo_response_bikeinfo();
  virtual ~list_all_bikeinfo_response_bikeinfo();

  list_all_bikeinfo_response_bikeinfo(const list_all_bikeinfo_response_bikeinfo& from);

  inline list_all_bikeinfo_response_bikeinfo& operator=(const list_all_bikeinfo_response_bikeinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  list_all_bikeinfo_response_bikeinfo(list_all_bikeinfo_response_bikeinfo&& from) noexcept
    : list_all_bikeinfo_response_bikeinfo() {
    *this = ::std::move(from);
  }

  inline list_all_bikeinfo_response_bikeinfo& operator=(list_all_bikeinfo_response_bikeinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_all_bikeinfo_response_bikeinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const list_all_bikeinfo_response_bikeinfo* internal_default_instance() {
    return reinterpret_cast<const list_all_bikeinfo_response_bikeinfo*>(
               &_list_all_bikeinfo_response_bikeinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(list_all_bikeinfo_response_bikeinfo* other);
  friend void swap(list_all_bikeinfo_response_bikeinfo& a, list_all_bikeinfo_response_bikeinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline list_all_bikeinfo_response_bikeinfo* New() const final {
    return CreateMaybeMessage<list_all_bikeinfo_response_bikeinfo>(NULL);
  }

  list_all_bikeinfo_response_bikeinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<list_all_bikeinfo_response_bikeinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const list_all_bikeinfo_response_bikeinfo& from);
  void MergeFrom(const list_all_bikeinfo_response_bikeinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(list_all_bikeinfo_response_bikeinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bikeId = 1;
  bool has_bikeid() const;
  void clear_bikeid();
  static const int kBikeIdFieldNumber = 1;
  ::google::protobuf::int32 bikeid() const;
  void set_bikeid(::google::protobuf::int32 value);

  // required int32 bikeStatus = 2;
  bool has_bikestatus() const;
  void clear_bikestatus();
  static const int kBikeStatusFieldNumber = 2;
  ::google::protobuf::int32 bikestatus() const;
  void set_bikestatus(::google::protobuf::int32 value);

  // required double longitude = 4;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  double longitude() const;
  void set_longitude(double value);

  // required double latitude = 5;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 5;
  double latitude() const;
  void set_latitude(double value);

  // @@protoc_insertion_point(class_scope:tutorial.list_all_bikeinfo_response.bikeinfo)
 private:
  void set_has_bikeid();
  void clear_has_bikeid();
  void set_has_bikestatus();
  void clear_has_bikestatus();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 bikeid_;
  ::google::protobuf::int32 bikestatus_;
  double longitude_;
  double latitude_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class list_all_bikeinfo_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.list_all_bikeinfo_response) */ {
 public:
  list_all_bikeinfo_response();
  virtual ~list_all_bikeinfo_response();

  list_all_bikeinfo_response(const list_all_bikeinfo_response& from);

  inline list_all_bikeinfo_response& operator=(const list_all_bikeinfo_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  list_all_bikeinfo_response(list_all_bikeinfo_response&& from) noexcept
    : list_all_bikeinfo_response() {
    *this = ::std::move(from);
  }

  inline list_all_bikeinfo_response& operator=(list_all_bikeinfo_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_all_bikeinfo_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const list_all_bikeinfo_response* internal_default_instance() {
    return reinterpret_cast<const list_all_bikeinfo_response*>(
               &_list_all_bikeinfo_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(list_all_bikeinfo_response* other);
  friend void swap(list_all_bikeinfo_response& a, list_all_bikeinfo_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline list_all_bikeinfo_response* New() const final {
    return CreateMaybeMessage<list_all_bikeinfo_response>(NULL);
  }

  list_all_bikeinfo_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<list_all_bikeinfo_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const list_all_bikeinfo_response& from);
  void MergeFrom(const list_all_bikeinfo_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(list_all_bikeinfo_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef list_all_bikeinfo_response_bikeinfo bikeinfo;

  // accessors -------------------------------------------------------

  // repeated .tutorial.list_all_bikeinfo_response.bikeinfo records = 3;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 3;
  ::tutorial::list_all_bikeinfo_response_bikeinfo* mutable_records(int index);
  ::google::protobuf::RepeatedPtrField< ::tutorial::list_all_bikeinfo_response_bikeinfo >*
      mutable_records();
  const ::tutorial::list_all_bikeinfo_response_bikeinfo& records(int index) const;
  ::tutorial::list_all_bikeinfo_response_bikeinfo* add_records();
  const ::google::protobuf::RepeatedPtrField< ::tutorial::list_all_bikeinfo_response_bikeinfo >&
      records() const;

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required int32 resCode = 2;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 2;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.list_all_bikeinfo_response)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_rescode();
  void clear_has_rescode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::list_all_bikeinfo_response_bikeinfo > records_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 rescode_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class list_account_records_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.list_account_records_request) */ {
 public:
  list_account_records_request();
  virtual ~list_account_records_request();

  list_account_records_request(const list_account_records_request& from);

  inline list_account_records_request& operator=(const list_account_records_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  list_account_records_request(list_account_records_request&& from) noexcept
    : list_account_records_request() {
    *this = ::std::move(from);
  }

  inline list_account_records_request& operator=(list_account_records_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_account_records_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const list_account_records_request* internal_default_instance() {
    return reinterpret_cast<const list_account_records_request*>(
               &_list_account_records_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(list_account_records_request* other);
  friend void swap(list_account_records_request& a, list_account_records_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline list_account_records_request* New() const final {
    return CreateMaybeMessage<list_account_records_request>(NULL);
  }

  list_account_records_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<list_account_records_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const list_account_records_request& from);
  void MergeFrom(const list_account_records_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(list_account_records_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:tutorial.list_account_records_request)
 private:
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class list_account_records_response_account_record : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.list_account_records_response.account_record) */ {
 public:
  list_account_records_response_account_record();
  virtual ~list_account_records_response_account_record();

  list_account_records_response_account_record(const list_account_records_response_account_record& from);

  inline list_account_records_response_account_record& operator=(const list_account_records_response_account_record& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  list_account_records_response_account_record(list_account_records_response_account_record&& from) noexcept
    : list_account_records_response_account_record() {
    *this = ::std::move(from);
  }

  inline list_account_records_response_account_record& operator=(list_account_records_response_account_record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_account_records_response_account_record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const list_account_records_response_account_record* internal_default_instance() {
    return reinterpret_cast<const list_account_records_response_account_record*>(
               &_list_account_records_response_account_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(list_account_records_response_account_record* other);
  friend void swap(list_account_records_response_account_record& a, list_account_records_response_account_record& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline list_account_records_response_account_record* New() const final {
    return CreateMaybeMessage<list_account_records_response_account_record>(NULL);
  }

  list_account_records_response_account_record* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<list_account_records_response_account_record>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const list_account_records_response_account_record& from);
  void MergeFrom(const list_account_records_response_account_record& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(list_account_records_response_account_record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 consume = 2;
  bool has_consume() const;
  void clear_consume();
  static const int kConsumeFieldNumber = 2;
  ::google::protobuf::int32 consume() const;
  void set_consume(::google::protobuf::int32 value);

  // required uint64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tutorial.list_account_records_response.account_record)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_consume();
  void clear_has_consume();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 consume_;
  ::google::protobuf::uint64 timestamp_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class list_account_records_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.list_account_records_response) */ {
 public:
  list_account_records_response();
  virtual ~list_account_records_response();

  list_account_records_response(const list_account_records_response& from);

  inline list_account_records_response& operator=(const list_account_records_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  list_account_records_response(list_account_records_response&& from) noexcept
    : list_account_records_response() {
    *this = ::std::move(from);
  }

  inline list_account_records_response& operator=(list_account_records_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_account_records_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const list_account_records_response* internal_default_instance() {
    return reinterpret_cast<const list_account_records_response*>(
               &_list_account_records_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(list_account_records_response* other);
  friend void swap(list_account_records_response& a, list_account_records_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline list_account_records_response* New() const final {
    return CreateMaybeMessage<list_account_records_response>(NULL);
  }

  list_account_records_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<list_account_records_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const list_account_records_response& from);
  void MergeFrom(const list_account_records_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(list_account_records_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef list_account_records_response_account_record account_record;

  // accessors -------------------------------------------------------

  // repeated .tutorial.list_account_records_response.account_record records = 3;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 3;
  ::tutorial::list_account_records_response_account_record* mutable_records(int index);
  ::google::protobuf::RepeatedPtrField< ::tutorial::list_account_records_response_account_record >*
      mutable_records();
  const ::tutorial::list_account_records_response_account_record& records(int index) const;
  ::tutorial::list_account_records_response_account_record* add_records();
  const ::google::protobuf::RepeatedPtrField< ::tutorial::list_account_records_response_account_record >&
      records() const;

  // optional string desc = 2;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // required int32 resCode = 1;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 1;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.list_account_records_response)
 private:
  void set_has_rescode();
  void clear_has_rescode();
  void set_has_desc();
  void clear_has_desc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::list_account_records_response_account_record > records_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::int32 rescode_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class list_travel_records_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.list_travel_records_request) */ {
 public:
  list_travel_records_request();
  virtual ~list_travel_records_request();

  list_travel_records_request(const list_travel_records_request& from);

  inline list_travel_records_request& operator=(const list_travel_records_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  list_travel_records_request(list_travel_records_request&& from) noexcept
    : list_travel_records_request() {
    *this = ::std::move(from);
  }

  inline list_travel_records_request& operator=(list_travel_records_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_travel_records_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const list_travel_records_request* internal_default_instance() {
    return reinterpret_cast<const list_travel_records_request*>(
               &_list_travel_records_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(list_travel_records_request* other);
  friend void swap(list_travel_records_request& a, list_travel_records_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline list_travel_records_request* New() const final {
    return CreateMaybeMessage<list_travel_records_request>(NULL);
  }

  list_travel_records_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<list_travel_records_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const list_travel_records_request& from);
  void MergeFrom(const list_travel_records_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(list_travel_records_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:tutorial.list_travel_records_request)
 private:
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class list_travel_records_response_travel_record : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.list_travel_records_response.travel_record) */ {
 public:
  list_travel_records_response_travel_record();
  virtual ~list_travel_records_response_travel_record();

  list_travel_records_response_travel_record(const list_travel_records_response_travel_record& from);

  inline list_travel_records_response_travel_record& operator=(const list_travel_records_response_travel_record& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  list_travel_records_response_travel_record(list_travel_records_response_travel_record&& from) noexcept
    : list_travel_records_response_travel_record() {
    *this = ::std::move(from);
  }

  inline list_travel_records_response_travel_record& operator=(list_travel_records_response_travel_record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_travel_records_response_travel_record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const list_travel_records_response_travel_record* internal_default_instance() {
    return reinterpret_cast<const list_travel_records_response_travel_record*>(
               &_list_travel_records_response_travel_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(list_travel_records_response_travel_record* other);
  friend void swap(list_travel_records_response_travel_record& a, list_travel_records_response_travel_record& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline list_travel_records_response_travel_record* New() const final {
    return CreateMaybeMessage<list_travel_records_response_travel_record>(NULL);
  }

  list_travel_records_response_travel_record* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<list_travel_records_response_travel_record>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const list_travel_records_response_travel_record& from);
  void MergeFrom(const list_travel_records_response_travel_record& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(list_travel_records_response_travel_record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 stm = 1;
  bool has_stm() const;
  void clear_stm();
  static const int kStmFieldNumber = 1;
  ::google::protobuf::uint64 stm() const;
  void set_stm(::google::protobuf::uint64 value);

  // required uint32 duration = 2;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // required uint32 amount = 3;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::uint32 amount() const;
  void set_amount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tutorial.list_travel_records_response.travel_record)
 private:
  void set_has_stm();
  void clear_has_stm();
  void set_has_duration();
  void clear_has_duration();
  void set_has_amount();
  void clear_has_amount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 stm_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 amount_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class list_travel_records_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.list_travel_records_response) */ {
 public:
  list_travel_records_response();
  virtual ~list_travel_records_response();

  list_travel_records_response(const list_travel_records_response& from);

  inline list_travel_records_response& operator=(const list_travel_records_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  list_travel_records_response(list_travel_records_response&& from) noexcept
    : list_travel_records_response() {
    *this = ::std::move(from);
  }

  inline list_travel_records_response& operator=(list_travel_records_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_travel_records_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const list_travel_records_response* internal_default_instance() {
    return reinterpret_cast<const list_travel_records_response*>(
               &_list_travel_records_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(list_travel_records_response* other);
  friend void swap(list_travel_records_response& a, list_travel_records_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline list_travel_records_response* New() const final {
    return CreateMaybeMessage<list_travel_records_response>(NULL);
  }

  list_travel_records_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<list_travel_records_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const list_travel_records_response& from);
  void MergeFrom(const list_travel_records_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(list_travel_records_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef list_travel_records_response_travel_record travel_record;

  // accessors -------------------------------------------------------

  // repeated .tutorial.list_travel_records_response.travel_record records = 6;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 6;
  ::tutorial::list_travel_records_response_travel_record* mutable_records(int index);
  ::google::protobuf::RepeatedPtrField< ::tutorial::list_travel_records_response_travel_record >*
      mutable_records();
  const ::tutorial::list_travel_records_response_travel_record& records(int index) const;
  ::tutorial::list_travel_records_response_travel_record* add_records();
  const ::google::protobuf::RepeatedPtrField< ::tutorial::list_travel_records_response_travel_record >&
      records() const;

  // optional string desc = 2;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // required double mileage = 3;
  bool has_mileage() const;
  void clear_mileage();
  static const int kMileageFieldNumber = 3;
  double mileage() const;
  void set_mileage(double value);

  // required double discharge = 4;
  bool has_discharge() const;
  void clear_discharge();
  static const int kDischargeFieldNumber = 4;
  double discharge() const;
  void set_discharge(double value);

  // required double calorie = 5;
  bool has_calorie() const;
  void clear_calorie();
  static const int kCalorieFieldNumber = 5;
  double calorie() const;
  void set_calorie(double value);

  // required int32 resCode = 1;
  bool has_rescode() const;
  void clear_rescode();
  static const int kResCodeFieldNumber = 1;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.list_travel_records_response)
 private:
  void set_has_rescode();
  void clear_has_rescode();
  void set_has_desc();
  void clear_has_desc();
  void set_has_mileage();
  void clear_has_mileage();
  void set_has_discharge();
  void clear_has_discharge();
  void set_has_calorie();
  void clear_has_calorie();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::list_travel_records_response_travel_record > records_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  double mileage_;
  double discharge_;
  double calorie_;
  ::google::protobuf::int32 rescode_;
  friend struct ::protobuf_bike_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// mobile_request

// required string userName = 1;
inline bool mobile_request::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mobile_request::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mobile_request::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mobile_request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& mobile_request::username() const {
  // @@protoc_insertion_point(field_get:tutorial.mobile_request.userName)
  return username_.GetNoArena();
}
inline void mobile_request::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.mobile_request.userName)
}
#if LANG_CXX11
inline void mobile_request::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.mobile_request.userName)
}
#endif
inline void mobile_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.mobile_request.userName)
}
inline void mobile_request::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.mobile_request.userName)
}
inline ::std::string* mobile_request::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.mobile_request.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mobile_request::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.mobile_request.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mobile_request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.mobile_request.userName)
}

// -------------------------------------------------------------------

// mobile_response

// required int32 resCode = 1;
inline bool mobile_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mobile_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mobile_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mobile_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 mobile_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.mobile_response.resCode)
  return rescode_;
}
inline void mobile_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.mobile_response.resCode)
}

// required int32 verCode = 2;
inline bool mobile_response::has_vercode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mobile_response::set_has_vercode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mobile_response::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mobile_response::clear_vercode() {
  vercode_ = 0;
  clear_has_vercode();
}
inline ::google::protobuf::int32 mobile_response::vercode() const {
  // @@protoc_insertion_point(field_get:tutorial.mobile_response.verCode)
  return vercode_;
}
inline void mobile_response::set_vercode(::google::protobuf::int32 value) {
  set_has_vercode();
  vercode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.mobile_response.verCode)
}

// optional string data = 3;
inline bool mobile_response::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mobile_response::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mobile_response::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mobile_response::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& mobile_response::data() const {
  // @@protoc_insertion_point(field_get:tutorial.mobile_response.data)
  return data_.GetNoArena();
}
inline void mobile_response::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.mobile_response.data)
}
#if LANG_CXX11
inline void mobile_response::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.mobile_response.data)
}
#endif
inline void mobile_response::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.mobile_response.data)
}
inline void mobile_response::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.mobile_response.data)
}
inline ::std::string* mobile_response::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:tutorial.mobile_response.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mobile_response::release_data() {
  // @@protoc_insertion_point(field_release:tutorial.mobile_response.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mobile_response::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:tutorial.mobile_response.data)
}

// -------------------------------------------------------------------

// addBike_request

// required int32 bikeId = 1;
inline bool addBike_request::has_bikeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void addBike_request::set_has_bikeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void addBike_request::clear_has_bikeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void addBike_request::clear_bikeid() {
  bikeid_ = 0;
  clear_has_bikeid();
}
inline ::google::protobuf::int32 addBike_request::bikeid() const {
  // @@protoc_insertion_point(field_get:tutorial.addBike_request.bikeId)
  return bikeid_;
}
inline void addBike_request::set_bikeid(::google::protobuf::int32 value) {
  set_has_bikeid();
  bikeid_ = value;
  // @@protoc_insertion_point(field_set:tutorial.addBike_request.bikeId)
}

// required double longitude = 2;
inline bool addBike_request::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void addBike_request::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void addBike_request::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void addBike_request::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double addBike_request::longitude() const {
  // @@protoc_insertion_point(field_get:tutorial.addBike_request.longitude)
  return longitude_;
}
inline void addBike_request::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.addBike_request.longitude)
}

// required double latitude = 3;
inline bool addBike_request::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void addBike_request::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void addBike_request::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void addBike_request::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double addBike_request::latitude() const {
  // @@protoc_insertion_point(field_get:tutorial.addBike_request.latitude)
  return latitude_;
}
inline void addBike_request::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.addBike_request.latitude)
}

// -------------------------------------------------------------------

// addBike_response

// required int32 bikeId = 1;
inline bool addBike_response::has_bikeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void addBike_response::set_has_bikeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void addBike_response::clear_has_bikeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void addBike_response::clear_bikeid() {
  bikeid_ = 0;
  clear_has_bikeid();
}
inline ::google::protobuf::int32 addBike_response::bikeid() const {
  // @@protoc_insertion_point(field_get:tutorial.addBike_response.bikeId)
  return bikeid_;
}
inline void addBike_response::set_bikeid(::google::protobuf::int32 value) {
  set_has_bikeid();
  bikeid_ = value;
  // @@protoc_insertion_point(field_set:tutorial.addBike_response.bikeId)
}

// required double longitude = 2;
inline bool addBike_response::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void addBike_response::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void addBike_response::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void addBike_response::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double addBike_response::longitude() const {
  // @@protoc_insertion_point(field_get:tutorial.addBike_response.longitude)
  return longitude_;
}
inline void addBike_response::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.addBike_response.longitude)
}

// required double latitude = 3;
inline bool addBike_response::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void addBike_response::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void addBike_response::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void addBike_response::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double addBike_response::latitude() const {
  // @@protoc_insertion_point(field_get:tutorial.addBike_response.latitude)
  return latitude_;
}
inline void addBike_response::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.addBike_response.latitude)
}

// required int32 resCode = 4;
inline bool addBike_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void addBike_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void addBike_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void addBike_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 addBike_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.addBike_response.resCode)
  return rescode_;
}
inline void addBike_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.addBike_response.resCode)
}

// -------------------------------------------------------------------

// deleteBike_request

// required int32 bikeId = 1;
inline bool deleteBike_request::has_bikeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void deleteBike_request::set_has_bikeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void deleteBike_request::clear_has_bikeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void deleteBike_request::clear_bikeid() {
  bikeid_ = 0;
  clear_has_bikeid();
}
inline ::google::protobuf::int32 deleteBike_request::bikeid() const {
  // @@protoc_insertion_point(field_get:tutorial.deleteBike_request.bikeId)
  return bikeid_;
}
inline void deleteBike_request::set_bikeid(::google::protobuf::int32 value) {
  set_has_bikeid();
  bikeid_ = value;
  // @@protoc_insertion_point(field_set:tutorial.deleteBike_request.bikeId)
}

// -------------------------------------------------------------------

// deleteBike_response

// required int32 bikeId = 1;
inline bool deleteBike_response::has_bikeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void deleteBike_response::set_has_bikeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void deleteBike_response::clear_has_bikeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void deleteBike_response::clear_bikeid() {
  bikeid_ = 0;
  clear_has_bikeid();
}
inline ::google::protobuf::int32 deleteBike_response::bikeid() const {
  // @@protoc_insertion_point(field_get:tutorial.deleteBike_response.bikeId)
  return bikeid_;
}
inline void deleteBike_response::set_bikeid(::google::protobuf::int32 value) {
  set_has_bikeid();
  bikeid_ = value;
  // @@protoc_insertion_point(field_set:tutorial.deleteBike_response.bikeId)
}

// required int32 resCode = 2;
inline bool deleteBike_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void deleteBike_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void deleteBike_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void deleteBike_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 deleteBike_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.deleteBike_response.resCode)
  return rescode_;
}
inline void deleteBike_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.deleteBike_response.resCode)
}

// -------------------------------------------------------------------

// registerUser_request

// required string userName = 1;
inline bool registerUser_request::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void registerUser_request::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void registerUser_request::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void registerUser_request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& registerUser_request::username() const {
  // @@protoc_insertion_point(field_get:tutorial.registerUser_request.userName)
  return username_.GetNoArena();
}
inline void registerUser_request::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.registerUser_request.userName)
}
#if LANG_CXX11
inline void registerUser_request::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.registerUser_request.userName)
}
#endif
inline void registerUser_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.registerUser_request.userName)
}
inline void registerUser_request::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.registerUser_request.userName)
}
inline ::std::string* registerUser_request::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.registerUser_request.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registerUser_request::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.registerUser_request.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registerUser_request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.registerUser_request.userName)
}

// required string userPwd = 2;
inline bool registerUser_request::has_userpwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void registerUser_request::set_has_userpwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void registerUser_request::clear_has_userpwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void registerUser_request::clear_userpwd() {
  userpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userpwd();
}
inline const ::std::string& registerUser_request::userpwd() const {
  // @@protoc_insertion_point(field_get:tutorial.registerUser_request.userPwd)
  return userpwd_.GetNoArena();
}
inline void registerUser_request::set_userpwd(const ::std::string& value) {
  set_has_userpwd();
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.registerUser_request.userPwd)
}
#if LANG_CXX11
inline void registerUser_request::set_userpwd(::std::string&& value) {
  set_has_userpwd();
  userpwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.registerUser_request.userPwd)
}
#endif
inline void registerUser_request::set_userpwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userpwd();
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.registerUser_request.userPwd)
}
inline void registerUser_request::set_userpwd(const char* value, size_t size) {
  set_has_userpwd();
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.registerUser_request.userPwd)
}
inline ::std::string* registerUser_request::mutable_userpwd() {
  set_has_userpwd();
  // @@protoc_insertion_point(field_mutable:tutorial.registerUser_request.userPwd)
  return userpwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registerUser_request::release_userpwd() {
  // @@protoc_insertion_point(field_release:tutorial.registerUser_request.userPwd)
  if (!has_userpwd()) {
    return NULL;
  }
  clear_has_userpwd();
  return userpwd_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registerUser_request::set_allocated_userpwd(::std::string* userpwd) {
  if (userpwd != NULL) {
    set_has_userpwd();
  } else {
    clear_has_userpwd();
  }
  userpwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpwd);
  // @@protoc_insertion_point(field_set_allocated:tutorial.registerUser_request.userPwd)
}

// required int32 verCode = 3;
inline bool registerUser_request::has_vercode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void registerUser_request::set_has_vercode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void registerUser_request::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void registerUser_request::clear_vercode() {
  vercode_ = 0;
  clear_has_vercode();
}
inline ::google::protobuf::int32 registerUser_request::vercode() const {
  // @@protoc_insertion_point(field_get:tutorial.registerUser_request.verCode)
  return vercode_;
}
inline void registerUser_request::set_vercode(::google::protobuf::int32 value) {
  set_has_vercode();
  vercode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.registerUser_request.verCode)
}

// -------------------------------------------------------------------

// registerUser_response

// required string userName = 1;
inline bool registerUser_response::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void registerUser_response::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void registerUser_response::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void registerUser_response::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& registerUser_response::username() const {
  // @@protoc_insertion_point(field_get:tutorial.registerUser_response.userName)
  return username_.GetNoArena();
}
inline void registerUser_response::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.registerUser_response.userName)
}
#if LANG_CXX11
inline void registerUser_response::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.registerUser_response.userName)
}
#endif
inline void registerUser_response::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.registerUser_response.userName)
}
inline void registerUser_response::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.registerUser_response.userName)
}
inline ::std::string* registerUser_response::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.registerUser_response.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registerUser_response::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.registerUser_response.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registerUser_response::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.registerUser_response.userName)
}

// required string userPwd = 2;
inline bool registerUser_response::has_userpwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void registerUser_response::set_has_userpwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void registerUser_response::clear_has_userpwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void registerUser_response::clear_userpwd() {
  userpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userpwd();
}
inline const ::std::string& registerUser_response::userpwd() const {
  // @@protoc_insertion_point(field_get:tutorial.registerUser_response.userPwd)
  return userpwd_.GetNoArena();
}
inline void registerUser_response::set_userpwd(const ::std::string& value) {
  set_has_userpwd();
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.registerUser_response.userPwd)
}
#if LANG_CXX11
inline void registerUser_response::set_userpwd(::std::string&& value) {
  set_has_userpwd();
  userpwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.registerUser_response.userPwd)
}
#endif
inline void registerUser_response::set_userpwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userpwd();
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.registerUser_response.userPwd)
}
inline void registerUser_response::set_userpwd(const char* value, size_t size) {
  set_has_userpwd();
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.registerUser_response.userPwd)
}
inline ::std::string* registerUser_response::mutable_userpwd() {
  set_has_userpwd();
  // @@protoc_insertion_point(field_mutable:tutorial.registerUser_response.userPwd)
  return userpwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registerUser_response::release_userpwd() {
  // @@protoc_insertion_point(field_release:tutorial.registerUser_response.userPwd)
  if (!has_userpwd()) {
    return NULL;
  }
  clear_has_userpwd();
  return userpwd_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registerUser_response::set_allocated_userpwd(::std::string* userpwd) {
  if (userpwd != NULL) {
    set_has_userpwd();
  } else {
    clear_has_userpwd();
  }
  userpwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpwd);
  // @@protoc_insertion_point(field_set_allocated:tutorial.registerUser_response.userPwd)
}

// optional int32 verCode = 3;
inline bool registerUser_response::has_vercode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void registerUser_response::set_has_vercode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void registerUser_response::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void registerUser_response::clear_vercode() {
  vercode_ = 0;
  clear_has_vercode();
}
inline ::google::protobuf::int32 registerUser_response::vercode() const {
  // @@protoc_insertion_point(field_get:tutorial.registerUser_response.verCode)
  return vercode_;
}
inline void registerUser_response::set_vercode(::google::protobuf::int32 value) {
  set_has_vercode();
  vercode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.registerUser_response.verCode)
}

// required int32 resCode = 4;
inline bool registerUser_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void registerUser_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void registerUser_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void registerUser_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 registerUser_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.registerUser_response.resCode)
  return rescode_;
}
inline void registerUser_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.registerUser_response.resCode)
}

// -------------------------------------------------------------------

// login_request

// required string userName = 1;
inline bool login_request::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_request::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login_request::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login_request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& login_request::username() const {
  // @@protoc_insertion_point(field_get:tutorial.login_request.userName)
  return username_.GetNoArena();
}
inline void login_request::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.login_request.userName)
}
#if LANG_CXX11
inline void login_request::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.login_request.userName)
}
#endif
inline void login_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.login_request.userName)
}
inline void login_request::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.login_request.userName)
}
inline ::std::string* login_request::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.login_request.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_request::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.login_request.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.login_request.userName)
}

// required string userPwd = 2;
inline bool login_request::has_userpwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_request::set_has_userpwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void login_request::clear_has_userpwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void login_request::clear_userpwd() {
  userpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userpwd();
}
inline const ::std::string& login_request::userpwd() const {
  // @@protoc_insertion_point(field_get:tutorial.login_request.userPwd)
  return userpwd_.GetNoArena();
}
inline void login_request::set_userpwd(const ::std::string& value) {
  set_has_userpwd();
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.login_request.userPwd)
}
#if LANG_CXX11
inline void login_request::set_userpwd(::std::string&& value) {
  set_has_userpwd();
  userpwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.login_request.userPwd)
}
#endif
inline void login_request::set_userpwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userpwd();
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.login_request.userPwd)
}
inline void login_request::set_userpwd(const char* value, size_t size) {
  set_has_userpwd();
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.login_request.userPwd)
}
inline ::std::string* login_request::mutable_userpwd() {
  set_has_userpwd();
  // @@protoc_insertion_point(field_mutable:tutorial.login_request.userPwd)
  return userpwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_request::release_userpwd() {
  // @@protoc_insertion_point(field_release:tutorial.login_request.userPwd)
  if (!has_userpwd()) {
    return NULL;
  }
  clear_has_userpwd();
  return userpwd_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_request::set_allocated_userpwd(::std::string* userpwd) {
  if (userpwd != NULL) {
    set_has_userpwd();
  } else {
    clear_has_userpwd();
  }
  userpwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpwd);
  // @@protoc_insertion_point(field_set_allocated:tutorial.login_request.userPwd)
}

// -------------------------------------------------------------------

// login_response

// required int32 resCode = 1;
inline bool login_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void login_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void login_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void login_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 login_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.login_response.resCode)
  return rescode_;
}
inline void login_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.login_response.resCode)
}

// required string userName = 2;
inline bool login_response::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_response::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login_response::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login_response::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& login_response::username() const {
  // @@protoc_insertion_point(field_get:tutorial.login_response.userName)
  return username_.GetNoArena();
}
inline void login_response::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.login_response.userName)
}
#if LANG_CXX11
inline void login_response::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.login_response.userName)
}
#endif
inline void login_response::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.login_response.userName)
}
inline void login_response::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.login_response.userName)
}
inline ::std::string* login_response::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.login_response.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_response::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.login_response.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_response::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.login_response.userName)
}

// required string userPwd = 3;
inline bool login_response::has_userpwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_response::set_has_userpwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void login_response::clear_has_userpwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void login_response::clear_userpwd() {
  userpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userpwd();
}
inline const ::std::string& login_response::userpwd() const {
  // @@protoc_insertion_point(field_get:tutorial.login_response.userPwd)
  return userpwd_.GetNoArena();
}
inline void login_response::set_userpwd(const ::std::string& value) {
  set_has_userpwd();
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.login_response.userPwd)
}
#if LANG_CXX11
inline void login_response::set_userpwd(::std::string&& value) {
  set_has_userpwd();
  userpwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.login_response.userPwd)
}
#endif
inline void login_response::set_userpwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userpwd();
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.login_response.userPwd)
}
inline void login_response::set_userpwd(const char* value, size_t size) {
  set_has_userpwd();
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.login_response.userPwd)
}
inline ::std::string* login_response::mutable_userpwd() {
  set_has_userpwd();
  // @@protoc_insertion_point(field_mutable:tutorial.login_response.userPwd)
  return userpwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_response::release_userpwd() {
  // @@protoc_insertion_point(field_release:tutorial.login_response.userPwd)
  if (!has_userpwd()) {
    return NULL;
  }
  clear_has_userpwd();
  return userpwd_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_response::set_allocated_userpwd(::std::string* userpwd) {
  if (userpwd != NULL) {
    set_has_userpwd();
  } else {
    clear_has_userpwd();
  }
  userpwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpwd);
  // @@protoc_insertion_point(field_set_allocated:tutorial.login_response.userPwd)
}

// optional int32 userLevel = 4;
inline bool login_response::has_userlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void login_response::set_has_userlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void login_response::clear_has_userlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void login_response::clear_userlevel() {
  userlevel_ = 0;
  clear_has_userlevel();
}
inline ::google::protobuf::int32 login_response::userlevel() const {
  // @@protoc_insertion_point(field_get:tutorial.login_response.userLevel)
  return userlevel_;
}
inline void login_response::set_userlevel(::google::protobuf::int32 value) {
  set_has_userlevel();
  userlevel_ = value;
  // @@protoc_insertion_point(field_set:tutorial.login_response.userLevel)
}

// -------------------------------------------------------------------

// recharge_request

// required string userName = 1;
inline bool recharge_request::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void recharge_request::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void recharge_request::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void recharge_request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& recharge_request::username() const {
  // @@protoc_insertion_point(field_get:tutorial.recharge_request.userName)
  return username_.GetNoArena();
}
inline void recharge_request::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.recharge_request.userName)
}
#if LANG_CXX11
inline void recharge_request::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.recharge_request.userName)
}
#endif
inline void recharge_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.recharge_request.userName)
}
inline void recharge_request::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.recharge_request.userName)
}
inline ::std::string* recharge_request::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.recharge_request.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* recharge_request::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.recharge_request.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void recharge_request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.recharge_request.userName)
}

// required int32 amount = 2;
inline bool recharge_request::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void recharge_request::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void recharge_request::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void recharge_request::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 recharge_request::amount() const {
  // @@protoc_insertion_point(field_get:tutorial.recharge_request.amount)
  return amount_;
}
inline void recharge_request::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:tutorial.recharge_request.amount)
}

// -------------------------------------------------------------------

// recharge_response

// required int32 resCode = 1;
inline bool recharge_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void recharge_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void recharge_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void recharge_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 recharge_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.recharge_response.resCode)
  return rescode_;
}
inline void recharge_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.recharge_response.resCode)
}

// optional string desc = 2;
inline bool recharge_response::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void recharge_response::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void recharge_response::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void recharge_response::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& recharge_response::desc() const {
  // @@protoc_insertion_point(field_get:tutorial.recharge_response.desc)
  return desc_.GetNoArena();
}
inline void recharge_response::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.recharge_response.desc)
}
#if LANG_CXX11
inline void recharge_response::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.recharge_response.desc)
}
#endif
inline void recharge_response::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.recharge_response.desc)
}
inline void recharge_response::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.recharge_response.desc)
}
inline ::std::string* recharge_response::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:tutorial.recharge_response.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* recharge_response::release_desc() {
  // @@protoc_insertion_point(field_release:tutorial.recharge_response.desc)
  if (!has_desc()) {
    return NULL;
  }
  clear_has_desc();
  return desc_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void recharge_response::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:tutorial.recharge_response.desc)
}

// required int32 balance = 3;
inline bool recharge_response::has_balance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void recharge_response::set_has_balance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void recharge_response::clear_has_balance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void recharge_response::clear_balance() {
  balance_ = 0;
  clear_has_balance();
}
inline ::google::protobuf::int32 recharge_response::balance() const {
  // @@protoc_insertion_point(field_get:tutorial.recharge_response.balance)
  return balance_;
}
inline void recharge_response::set_balance(::google::protobuf::int32 value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:tutorial.recharge_response.balance)
}

// -------------------------------------------------------------------

// account_balance_request

// required string userName = 1;
inline bool account_balance_request::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void account_balance_request::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void account_balance_request::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void account_balance_request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& account_balance_request::username() const {
  // @@protoc_insertion_point(field_get:tutorial.account_balance_request.userName)
  return username_.GetNoArena();
}
inline void account_balance_request::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.account_balance_request.userName)
}
#if LANG_CXX11
inline void account_balance_request::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.account_balance_request.userName)
}
#endif
inline void account_balance_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.account_balance_request.userName)
}
inline void account_balance_request::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.account_balance_request.userName)
}
inline ::std::string* account_balance_request::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.account_balance_request.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* account_balance_request::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.account_balance_request.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void account_balance_request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.account_balance_request.userName)
}

// -------------------------------------------------------------------

// account_balance_response

// required int32 resCode = 1;
inline bool account_balance_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void account_balance_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void account_balance_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void account_balance_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 account_balance_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.account_balance_response.resCode)
  return rescode_;
}
inline void account_balance_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.account_balance_response.resCode)
}

// optional string desc = 2;
inline bool account_balance_response::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void account_balance_response::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void account_balance_response::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void account_balance_response::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& account_balance_response::desc() const {
  // @@protoc_insertion_point(field_get:tutorial.account_balance_response.desc)
  return desc_.GetNoArena();
}
inline void account_balance_response::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.account_balance_response.desc)
}
#if LANG_CXX11
inline void account_balance_response::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.account_balance_response.desc)
}
#endif
inline void account_balance_response::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.account_balance_response.desc)
}
inline void account_balance_response::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.account_balance_response.desc)
}
inline ::std::string* account_balance_response::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:tutorial.account_balance_response.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* account_balance_response::release_desc() {
  // @@protoc_insertion_point(field_release:tutorial.account_balance_response.desc)
  if (!has_desc()) {
    return NULL;
  }
  clear_has_desc();
  return desc_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void account_balance_response::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:tutorial.account_balance_response.desc)
}

// required int32 balance = 3;
inline bool account_balance_response::has_balance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void account_balance_response::set_has_balance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void account_balance_response::clear_has_balance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void account_balance_response::clear_balance() {
  balance_ = 0;
  clear_has_balance();
}
inline ::google::protobuf::int32 account_balance_response::balance() const {
  // @@protoc_insertion_point(field_get:tutorial.account_balance_response.balance)
  return balance_;
}
inline void account_balance_response::set_balance(::google::protobuf::int32 value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:tutorial.account_balance_response.balance)
}

// -------------------------------------------------------------------

// broadcast_msg_request

// required int32 bikeId = 1;
inline bool broadcast_msg_request::has_bikeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void broadcast_msg_request::set_has_bikeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void broadcast_msg_request::clear_has_bikeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void broadcast_msg_request::clear_bikeid() {
  bikeid_ = 0;
  clear_has_bikeid();
}
inline ::google::protobuf::int32 broadcast_msg_request::bikeid() const {
  // @@protoc_insertion_point(field_get:tutorial.broadcast_msg_request.bikeId)
  return bikeid_;
}
inline void broadcast_msg_request::set_bikeid(::google::protobuf::int32 value) {
  set_has_bikeid();
  bikeid_ = value;
  // @@protoc_insertion_point(field_set:tutorial.broadcast_msg_request.bikeId)
}

// required int32 bikeStatus = 2;
inline bool broadcast_msg_request::has_bikestatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void broadcast_msg_request::set_has_bikestatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void broadcast_msg_request::clear_has_bikestatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void broadcast_msg_request::clear_bikestatus() {
  bikestatus_ = 0;
  clear_has_bikestatus();
}
inline ::google::protobuf::int32 broadcast_msg_request::bikestatus() const {
  // @@protoc_insertion_point(field_get:tutorial.broadcast_msg_request.bikeStatus)
  return bikestatus_;
}
inline void broadcast_msg_request::set_bikestatus(::google::protobuf::int32 value) {
  set_has_bikestatus();
  bikestatus_ = value;
  // @@protoc_insertion_point(field_set:tutorial.broadcast_msg_request.bikeStatus)
}

// required double longitude = 3;
inline bool broadcast_msg_request::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void broadcast_msg_request::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void broadcast_msg_request::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void broadcast_msg_request::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double broadcast_msg_request::longitude() const {
  // @@protoc_insertion_point(field_get:tutorial.broadcast_msg_request.longitude)
  return longitude_;
}
inline void broadcast_msg_request::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.broadcast_msg_request.longitude)
}

// required double latitude = 4;
inline bool broadcast_msg_request::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void broadcast_msg_request::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void broadcast_msg_request::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void broadcast_msg_request::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double broadcast_msg_request::latitude() const {
  // @@protoc_insertion_point(field_get:tutorial.broadcast_msg_request.latitude)
  return latitude_;
}
inline void broadcast_msg_request::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.broadcast_msg_request.latitude)
}

// -------------------------------------------------------------------

// broadcast_msg_response

// required int32 bikeId = 1;
inline bool broadcast_msg_response::has_bikeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void broadcast_msg_response::set_has_bikeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void broadcast_msg_response::clear_has_bikeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void broadcast_msg_response::clear_bikeid() {
  bikeid_ = 0;
  clear_has_bikeid();
}
inline ::google::protobuf::int32 broadcast_msg_response::bikeid() const {
  // @@protoc_insertion_point(field_get:tutorial.broadcast_msg_response.bikeId)
  return bikeid_;
}
inline void broadcast_msg_response::set_bikeid(::google::protobuf::int32 value) {
  set_has_bikeid();
  bikeid_ = value;
  // @@protoc_insertion_point(field_set:tutorial.broadcast_msg_response.bikeId)
}

// required int32 bikeStatus = 2;
inline bool broadcast_msg_response::has_bikestatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void broadcast_msg_response::set_has_bikestatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void broadcast_msg_response::clear_has_bikestatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void broadcast_msg_response::clear_bikestatus() {
  bikestatus_ = 0;
  clear_has_bikestatus();
}
inline ::google::protobuf::int32 broadcast_msg_response::bikestatus() const {
  // @@protoc_insertion_point(field_get:tutorial.broadcast_msg_response.bikeStatus)
  return bikestatus_;
}
inline void broadcast_msg_response::set_bikestatus(::google::protobuf::int32 value) {
  set_has_bikestatus();
  bikestatus_ = value;
  // @@protoc_insertion_point(field_set:tutorial.broadcast_msg_response.bikeStatus)
}

// required double longitude = 3;
inline bool broadcast_msg_response::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void broadcast_msg_response::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void broadcast_msg_response::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void broadcast_msg_response::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double broadcast_msg_response::longitude() const {
  // @@protoc_insertion_point(field_get:tutorial.broadcast_msg_response.longitude)
  return longitude_;
}
inline void broadcast_msg_response::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.broadcast_msg_response.longitude)
}

// required double latitude = 4;
inline bool broadcast_msg_response::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void broadcast_msg_response::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void broadcast_msg_response::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void broadcast_msg_response::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double broadcast_msg_response::latitude() const {
  // @@protoc_insertion_point(field_get:tutorial.broadcast_msg_response.latitude)
  return latitude_;
}
inline void broadcast_msg_response::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.broadcast_msg_response.latitude)
}

// -------------------------------------------------------------------

// bike_scanQR_start_request

// required string userName = 1;
inline bool bike_scanQR_start_request::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bike_scanQR_start_request::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bike_scanQR_start_request::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bike_scanQR_start_request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& bike_scanQR_start_request::username() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_start_request.userName)
  return username_.GetNoArena();
}
inline void bike_scanQR_start_request::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_start_request.userName)
}
#if LANG_CXX11
inline void bike_scanQR_start_request::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.bike_scanQR_start_request.userName)
}
#endif
inline void bike_scanQR_start_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.bike_scanQR_start_request.userName)
}
inline void bike_scanQR_start_request::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.bike_scanQR_start_request.userName)
}
inline ::std::string* bike_scanQR_start_request::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.bike_scanQR_start_request.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* bike_scanQR_start_request::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.bike_scanQR_start_request.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void bike_scanQR_start_request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.bike_scanQR_start_request.userName)
}

// required int32 bikeId = 2;
inline bool bike_scanQR_start_request::has_bikeid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bike_scanQR_start_request::set_has_bikeid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bike_scanQR_start_request::clear_has_bikeid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bike_scanQR_start_request::clear_bikeid() {
  bikeid_ = 0;
  clear_has_bikeid();
}
inline ::google::protobuf::int32 bike_scanQR_start_request::bikeid() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_start_request.bikeId)
  return bikeid_;
}
inline void bike_scanQR_start_request::set_bikeid(::google::protobuf::int32 value) {
  set_has_bikeid();
  bikeid_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_start_request.bikeId)
}

// required uint64 timestamp = 3;
inline bool bike_scanQR_start_request::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bike_scanQR_start_request::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bike_scanQR_start_request::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bike_scanQR_start_request::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 bike_scanQR_start_request::timestamp() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_start_request.timestamp)
  return timestamp_;
}
inline void bike_scanQR_start_request::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_start_request.timestamp)
}

// required double longitude = 4;
inline bool bike_scanQR_start_request::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bike_scanQR_start_request::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bike_scanQR_start_request::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bike_scanQR_start_request::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double bike_scanQR_start_request::longitude() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_start_request.longitude)
  return longitude_;
}
inline void bike_scanQR_start_request::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_start_request.longitude)
}

// required double latitude = 5;
inline bool bike_scanQR_start_request::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bike_scanQR_start_request::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bike_scanQR_start_request::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bike_scanQR_start_request::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double bike_scanQR_start_request::latitude() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_start_request.latitude)
  return latitude_;
}
inline void bike_scanQR_start_request::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_start_request.latitude)
}

// -------------------------------------------------------------------

// bike_scanQR_start_response

// required uint64 timestamp = 1;
inline bool bike_scanQR_start_response::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bike_scanQR_start_response::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bike_scanQR_start_response::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bike_scanQR_start_response::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 bike_scanQR_start_response::timestamp() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_start_response.timestamp)
  return timestamp_;
}
inline void bike_scanQR_start_response::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_start_response.timestamp)
}

// required double longitude = 2;
inline bool bike_scanQR_start_response::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bike_scanQR_start_response::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bike_scanQR_start_response::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bike_scanQR_start_response::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double bike_scanQR_start_response::longitude() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_start_response.longitude)
  return longitude_;
}
inline void bike_scanQR_start_response::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_start_response.longitude)
}

// required double latitude = 3;
inline bool bike_scanQR_start_response::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bike_scanQR_start_response::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bike_scanQR_start_response::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bike_scanQR_start_response::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double bike_scanQR_start_response::latitude() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_start_response.latitude)
  return latitude_;
}
inline void bike_scanQR_start_response::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_start_response.latitude)
}

// required int32 resCode = 4;
inline bool bike_scanQR_start_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bike_scanQR_start_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bike_scanQR_start_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bike_scanQR_start_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 bike_scanQR_start_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_start_response.resCode)
  return rescode_;
}
inline void bike_scanQR_start_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_start_response.resCode)
}

// -------------------------------------------------------------------

// bike_scanQR_end_request

// required string userName = 1;
inline bool bike_scanQR_end_request::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bike_scanQR_end_request::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bike_scanQR_end_request::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bike_scanQR_end_request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& bike_scanQR_end_request::username() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_end_request.userName)
  return username_.GetNoArena();
}
inline void bike_scanQR_end_request::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_end_request.userName)
}
#if LANG_CXX11
inline void bike_scanQR_end_request::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.bike_scanQR_end_request.userName)
}
#endif
inline void bike_scanQR_end_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.bike_scanQR_end_request.userName)
}
inline void bike_scanQR_end_request::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.bike_scanQR_end_request.userName)
}
inline ::std::string* bike_scanQR_end_request::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.bike_scanQR_end_request.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* bike_scanQR_end_request::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.bike_scanQR_end_request.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void bike_scanQR_end_request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.bike_scanQR_end_request.userName)
}

// required int32 bikeId = 2;
inline bool bike_scanQR_end_request::has_bikeid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bike_scanQR_end_request::set_has_bikeid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bike_scanQR_end_request::clear_has_bikeid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bike_scanQR_end_request::clear_bikeid() {
  bikeid_ = 0;
  clear_has_bikeid();
}
inline ::google::protobuf::int32 bike_scanQR_end_request::bikeid() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_end_request.bikeId)
  return bikeid_;
}
inline void bike_scanQR_end_request::set_bikeid(::google::protobuf::int32 value) {
  set_has_bikeid();
  bikeid_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_end_request.bikeId)
}

// required uint64 timestamp = 3;
inline bool bike_scanQR_end_request::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bike_scanQR_end_request::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bike_scanQR_end_request::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bike_scanQR_end_request::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 bike_scanQR_end_request::timestamp() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_end_request.timestamp)
  return timestamp_;
}
inline void bike_scanQR_end_request::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_end_request.timestamp)
}

// required double longitude = 4;
inline bool bike_scanQR_end_request::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bike_scanQR_end_request::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bike_scanQR_end_request::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bike_scanQR_end_request::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double bike_scanQR_end_request::longitude() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_end_request.longitude)
  return longitude_;
}
inline void bike_scanQR_end_request::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_end_request.longitude)
}

// required double latitude = 5;
inline bool bike_scanQR_end_request::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bike_scanQR_end_request::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bike_scanQR_end_request::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bike_scanQR_end_request::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double bike_scanQR_end_request::latitude() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_end_request.latitude)
  return latitude_;
}
inline void bike_scanQR_end_request::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_end_request.latitude)
}

// -------------------------------------------------------------------

// bike_scanQR_end_response

// required int32 consume = 1;
inline bool bike_scanQR_end_response::has_consume() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bike_scanQR_end_response::set_has_consume() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bike_scanQR_end_response::clear_has_consume() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bike_scanQR_end_response::clear_consume() {
  consume_ = 0;
  clear_has_consume();
}
inline ::google::protobuf::int32 bike_scanQR_end_response::consume() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_end_response.consume)
  return consume_;
}
inline void bike_scanQR_end_response::set_consume(::google::protobuf::int32 value) {
  set_has_consume();
  consume_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_end_response.consume)
}

// required int32 balance = 2;
inline bool bike_scanQR_end_response::has_balance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bike_scanQR_end_response::set_has_balance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bike_scanQR_end_response::clear_has_balance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bike_scanQR_end_response::clear_balance() {
  balance_ = 0;
  clear_has_balance();
}
inline ::google::protobuf::int32 bike_scanQR_end_response::balance() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_end_response.balance)
  return balance_;
}
inline void bike_scanQR_end_response::set_balance(::google::protobuf::int32 value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_end_response.balance)
}

// required uint64 timestamp = 3;
inline bool bike_scanQR_end_response::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bike_scanQR_end_response::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bike_scanQR_end_response::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bike_scanQR_end_response::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 bike_scanQR_end_response::timestamp() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_end_response.timestamp)
  return timestamp_;
}
inline void bike_scanQR_end_response::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_end_response.timestamp)
}

// required double longitude = 4;
inline bool bike_scanQR_end_response::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bike_scanQR_end_response::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bike_scanQR_end_response::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bike_scanQR_end_response::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double bike_scanQR_end_response::longitude() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_end_response.longitude)
  return longitude_;
}
inline void bike_scanQR_end_response::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_end_response.longitude)
}

// required double latitude = 5;
inline bool bike_scanQR_end_response::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bike_scanQR_end_response::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bike_scanQR_end_response::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bike_scanQR_end_response::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double bike_scanQR_end_response::latitude() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_end_response.latitude)
  return latitude_;
}
inline void bike_scanQR_end_response::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_end_response.latitude)
}

// required int32 resCode = 6;
inline bool bike_scanQR_end_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void bike_scanQR_end_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void bike_scanQR_end_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void bike_scanQR_end_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 bike_scanQR_end_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_scanQR_end_response.resCode)
  return rescode_;
}
inline void bike_scanQR_end_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_scanQR_end_response.resCode)
}

// -------------------------------------------------------------------

// bike_fault_request

// required string userName = 1;
inline bool bike_fault_request::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bike_fault_request::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bike_fault_request::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bike_fault_request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& bike_fault_request::username() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_fault_request.userName)
  return username_.GetNoArena();
}
inline void bike_fault_request::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.bike_fault_request.userName)
}
#if LANG_CXX11
inline void bike_fault_request::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.bike_fault_request.userName)
}
#endif
inline void bike_fault_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.bike_fault_request.userName)
}
inline void bike_fault_request::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.bike_fault_request.userName)
}
inline ::std::string* bike_fault_request::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.bike_fault_request.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* bike_fault_request::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.bike_fault_request.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void bike_fault_request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.bike_fault_request.userName)
}

// required uint32 bike_id = 2;
inline bool bike_fault_request::has_bike_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bike_fault_request::set_has_bike_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bike_fault_request::clear_has_bike_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bike_fault_request::clear_bike_id() {
  bike_id_ = 0u;
  clear_has_bike_id();
}
inline ::google::protobuf::uint32 bike_fault_request::bike_id() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_fault_request.bike_id)
  return bike_id_;
}
inline void bike_fault_request::set_bike_id(::google::protobuf::uint32 value) {
  set_has_bike_id();
  bike_id_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_fault_request.bike_id)
}

// required uint64 timestamp = 3;
inline bool bike_fault_request::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bike_fault_request::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bike_fault_request::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bike_fault_request::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 bike_fault_request::timestamp() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_fault_request.timestamp)
  return timestamp_;
}
inline void bike_fault_request::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_fault_request.timestamp)
}

// required double longitude = 4;
inline bool bike_fault_request::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bike_fault_request::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bike_fault_request::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bike_fault_request::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double bike_fault_request::longitude() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_fault_request.longitude)
  return longitude_;
}
inline void bike_fault_request::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_fault_request.longitude)
}

// required double latitude = 5;
inline bool bike_fault_request::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bike_fault_request::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bike_fault_request::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bike_fault_request::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double bike_fault_request::latitude() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_fault_request.latitude)
  return latitude_;
}
inline void bike_fault_request::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_fault_request.latitude)
}

// -------------------------------------------------------------------

// bike_fault_response

// required int32 resCode = 1;
inline bool bike_fault_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bike_fault_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bike_fault_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bike_fault_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 bike_fault_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_fault_response.resCode)
  return rescode_;
}
inline void bike_fault_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_fault_response.resCode)
}

// -------------------------------------------------------------------

// bike_repair_finish_request

// required string userName = 1;
inline bool bike_repair_finish_request::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bike_repair_finish_request::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bike_repair_finish_request::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bike_repair_finish_request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& bike_repair_finish_request::username() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_repair_finish_request.userName)
  return username_.GetNoArena();
}
inline void bike_repair_finish_request::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.bike_repair_finish_request.userName)
}
#if LANG_CXX11
inline void bike_repair_finish_request::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.bike_repair_finish_request.userName)
}
#endif
inline void bike_repair_finish_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.bike_repair_finish_request.userName)
}
inline void bike_repair_finish_request::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.bike_repair_finish_request.userName)
}
inline ::std::string* bike_repair_finish_request::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.bike_repair_finish_request.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* bike_repair_finish_request::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.bike_repair_finish_request.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void bike_repair_finish_request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.bike_repair_finish_request.userName)
}

// required uint32 bike_id = 2;
inline bool bike_repair_finish_request::has_bike_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bike_repair_finish_request::set_has_bike_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bike_repair_finish_request::clear_has_bike_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bike_repair_finish_request::clear_bike_id() {
  bike_id_ = 0u;
  clear_has_bike_id();
}
inline ::google::protobuf::uint32 bike_repair_finish_request::bike_id() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_repair_finish_request.bike_id)
  return bike_id_;
}
inline void bike_repair_finish_request::set_bike_id(::google::protobuf::uint32 value) {
  set_has_bike_id();
  bike_id_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_repair_finish_request.bike_id)
}

// required uint64 timestamp = 3;
inline bool bike_repair_finish_request::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bike_repair_finish_request::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bike_repair_finish_request::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bike_repair_finish_request::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 bike_repair_finish_request::timestamp() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_repair_finish_request.timestamp)
  return timestamp_;
}
inline void bike_repair_finish_request::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_repair_finish_request.timestamp)
}

// required double longitude = 4;
inline bool bike_repair_finish_request::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bike_repair_finish_request::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bike_repair_finish_request::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bike_repair_finish_request::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double bike_repair_finish_request::longitude() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_repair_finish_request.longitude)
  return longitude_;
}
inline void bike_repair_finish_request::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_repair_finish_request.longitude)
}

// required double latitude = 5;
inline bool bike_repair_finish_request::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bike_repair_finish_request::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bike_repair_finish_request::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bike_repair_finish_request::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double bike_repair_finish_request::latitude() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_repair_finish_request.latitude)
  return latitude_;
}
inline void bike_repair_finish_request::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_repair_finish_request.latitude)
}

// -------------------------------------------------------------------

// bike_repair_finish_response

// required int32 resCode = 1;
inline bool bike_repair_finish_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bike_repair_finish_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bike_repair_finish_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bike_repair_finish_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 bike_repair_finish_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.bike_repair_finish_response.resCode)
  return rescode_;
}
inline void bike_repair_finish_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.bike_repair_finish_response.resCode)
}

// -------------------------------------------------------------------

// list_all_bikeinfo_request

// required string userName = 1;
inline bool list_all_bikeinfo_request::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_all_bikeinfo_request::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_all_bikeinfo_request::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_all_bikeinfo_request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& list_all_bikeinfo_request::username() const {
  // @@protoc_insertion_point(field_get:tutorial.list_all_bikeinfo_request.userName)
  return username_.GetNoArena();
}
inline void list_all_bikeinfo_request::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.list_all_bikeinfo_request.userName)
}
#if LANG_CXX11
inline void list_all_bikeinfo_request::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.list_all_bikeinfo_request.userName)
}
#endif
inline void list_all_bikeinfo_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.list_all_bikeinfo_request.userName)
}
inline void list_all_bikeinfo_request::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.list_all_bikeinfo_request.userName)
}
inline ::std::string* list_all_bikeinfo_request::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.list_all_bikeinfo_request.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* list_all_bikeinfo_request::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.list_all_bikeinfo_request.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void list_all_bikeinfo_request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.list_all_bikeinfo_request.userName)
}

// -------------------------------------------------------------------

// list_all_bikeinfo_response_bikeinfo

// required int32 bikeId = 1;
inline bool list_all_bikeinfo_response_bikeinfo::has_bikeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_all_bikeinfo_response_bikeinfo::set_has_bikeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_all_bikeinfo_response_bikeinfo::clear_has_bikeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_all_bikeinfo_response_bikeinfo::clear_bikeid() {
  bikeid_ = 0;
  clear_has_bikeid();
}
inline ::google::protobuf::int32 list_all_bikeinfo_response_bikeinfo::bikeid() const {
  // @@protoc_insertion_point(field_get:tutorial.list_all_bikeinfo_response.bikeinfo.bikeId)
  return bikeid_;
}
inline void list_all_bikeinfo_response_bikeinfo::set_bikeid(::google::protobuf::int32 value) {
  set_has_bikeid();
  bikeid_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_all_bikeinfo_response.bikeinfo.bikeId)
}

// required int32 bikeStatus = 2;
inline bool list_all_bikeinfo_response_bikeinfo::has_bikestatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void list_all_bikeinfo_response_bikeinfo::set_has_bikestatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void list_all_bikeinfo_response_bikeinfo::clear_has_bikestatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void list_all_bikeinfo_response_bikeinfo::clear_bikestatus() {
  bikestatus_ = 0;
  clear_has_bikestatus();
}
inline ::google::protobuf::int32 list_all_bikeinfo_response_bikeinfo::bikestatus() const {
  // @@protoc_insertion_point(field_get:tutorial.list_all_bikeinfo_response.bikeinfo.bikeStatus)
  return bikestatus_;
}
inline void list_all_bikeinfo_response_bikeinfo::set_bikestatus(::google::protobuf::int32 value) {
  set_has_bikestatus();
  bikestatus_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_all_bikeinfo_response.bikeinfo.bikeStatus)
}

// required double longitude = 4;
inline bool list_all_bikeinfo_response_bikeinfo::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void list_all_bikeinfo_response_bikeinfo::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void list_all_bikeinfo_response_bikeinfo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void list_all_bikeinfo_response_bikeinfo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double list_all_bikeinfo_response_bikeinfo::longitude() const {
  // @@protoc_insertion_point(field_get:tutorial.list_all_bikeinfo_response.bikeinfo.longitude)
  return longitude_;
}
inline void list_all_bikeinfo_response_bikeinfo::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_all_bikeinfo_response.bikeinfo.longitude)
}

// required double latitude = 5;
inline bool list_all_bikeinfo_response_bikeinfo::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void list_all_bikeinfo_response_bikeinfo::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void list_all_bikeinfo_response_bikeinfo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void list_all_bikeinfo_response_bikeinfo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double list_all_bikeinfo_response_bikeinfo::latitude() const {
  // @@protoc_insertion_point(field_get:tutorial.list_all_bikeinfo_response.bikeinfo.latitude)
  return latitude_;
}
inline void list_all_bikeinfo_response_bikeinfo::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_all_bikeinfo_response.bikeinfo.latitude)
}

// -------------------------------------------------------------------

// list_all_bikeinfo_response

// required string userName = 1;
inline bool list_all_bikeinfo_response::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_all_bikeinfo_response::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_all_bikeinfo_response::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_all_bikeinfo_response::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& list_all_bikeinfo_response::username() const {
  // @@protoc_insertion_point(field_get:tutorial.list_all_bikeinfo_response.userName)
  return username_.GetNoArena();
}
inline void list_all_bikeinfo_response::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.list_all_bikeinfo_response.userName)
}
#if LANG_CXX11
inline void list_all_bikeinfo_response::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.list_all_bikeinfo_response.userName)
}
#endif
inline void list_all_bikeinfo_response::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.list_all_bikeinfo_response.userName)
}
inline void list_all_bikeinfo_response::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.list_all_bikeinfo_response.userName)
}
inline ::std::string* list_all_bikeinfo_response::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.list_all_bikeinfo_response.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* list_all_bikeinfo_response::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.list_all_bikeinfo_response.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void list_all_bikeinfo_response::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.list_all_bikeinfo_response.userName)
}

// required int32 resCode = 2;
inline bool list_all_bikeinfo_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void list_all_bikeinfo_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void list_all_bikeinfo_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void list_all_bikeinfo_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 list_all_bikeinfo_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.list_all_bikeinfo_response.resCode)
  return rescode_;
}
inline void list_all_bikeinfo_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_all_bikeinfo_response.resCode)
}

// repeated .tutorial.list_all_bikeinfo_response.bikeinfo records = 3;
inline int list_all_bikeinfo_response::records_size() const {
  return records_.size();
}
inline void list_all_bikeinfo_response::clear_records() {
  records_.Clear();
}
inline ::tutorial::list_all_bikeinfo_response_bikeinfo* list_all_bikeinfo_response::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.list_all_bikeinfo_response.records)
  return records_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::list_all_bikeinfo_response_bikeinfo >*
list_all_bikeinfo_response::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.list_all_bikeinfo_response.records)
  return &records_;
}
inline const ::tutorial::list_all_bikeinfo_response_bikeinfo& list_all_bikeinfo_response::records(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.list_all_bikeinfo_response.records)
  return records_.Get(index);
}
inline ::tutorial::list_all_bikeinfo_response_bikeinfo* list_all_bikeinfo_response::add_records() {
  // @@protoc_insertion_point(field_add:tutorial.list_all_bikeinfo_response.records)
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::list_all_bikeinfo_response_bikeinfo >&
list_all_bikeinfo_response::records() const {
  // @@protoc_insertion_point(field_list:tutorial.list_all_bikeinfo_response.records)
  return records_;
}

// -------------------------------------------------------------------

// list_account_records_request

// required string userName = 1;
inline bool list_account_records_request::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_account_records_request::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_account_records_request::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_account_records_request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& list_account_records_request::username() const {
  // @@protoc_insertion_point(field_get:tutorial.list_account_records_request.userName)
  return username_.GetNoArena();
}
inline void list_account_records_request::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.list_account_records_request.userName)
}
#if LANG_CXX11
inline void list_account_records_request::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.list_account_records_request.userName)
}
#endif
inline void list_account_records_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.list_account_records_request.userName)
}
inline void list_account_records_request::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.list_account_records_request.userName)
}
inline ::std::string* list_account_records_request::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.list_account_records_request.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* list_account_records_request::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.list_account_records_request.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void list_account_records_request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.list_account_records_request.userName)
}

// -------------------------------------------------------------------

// list_account_records_response_account_record

// required int32 type = 1;
inline bool list_account_records_response_account_record::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_account_records_response_account_record::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_account_records_response_account_record::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_account_records_response_account_record::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 list_account_records_response_account_record::type() const {
  // @@protoc_insertion_point(field_get:tutorial.list_account_records_response.account_record.type)
  return type_;
}
inline void list_account_records_response_account_record::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_account_records_response.account_record.type)
}

// required int32 consume = 2;
inline bool list_account_records_response_account_record::has_consume() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void list_account_records_response_account_record::set_has_consume() {
  _has_bits_[0] |= 0x00000002u;
}
inline void list_account_records_response_account_record::clear_has_consume() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void list_account_records_response_account_record::clear_consume() {
  consume_ = 0;
  clear_has_consume();
}
inline ::google::protobuf::int32 list_account_records_response_account_record::consume() const {
  // @@protoc_insertion_point(field_get:tutorial.list_account_records_response.account_record.consume)
  return consume_;
}
inline void list_account_records_response_account_record::set_consume(::google::protobuf::int32 value) {
  set_has_consume();
  consume_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_account_records_response.account_record.consume)
}

// required uint64 timestamp = 3;
inline bool list_account_records_response_account_record::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void list_account_records_response_account_record::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void list_account_records_response_account_record::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void list_account_records_response_account_record::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 list_account_records_response_account_record::timestamp() const {
  // @@protoc_insertion_point(field_get:tutorial.list_account_records_response.account_record.timestamp)
  return timestamp_;
}
inline void list_account_records_response_account_record::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_account_records_response.account_record.timestamp)
}

// -------------------------------------------------------------------

// list_account_records_response

// required int32 resCode = 1;
inline bool list_account_records_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void list_account_records_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void list_account_records_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void list_account_records_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 list_account_records_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.list_account_records_response.resCode)
  return rescode_;
}
inline void list_account_records_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_account_records_response.resCode)
}

// optional string desc = 2;
inline bool list_account_records_response::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_account_records_response::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_account_records_response::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_account_records_response::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& list_account_records_response::desc() const {
  // @@protoc_insertion_point(field_get:tutorial.list_account_records_response.desc)
  return desc_.GetNoArena();
}
inline void list_account_records_response::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.list_account_records_response.desc)
}
#if LANG_CXX11
inline void list_account_records_response::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.list_account_records_response.desc)
}
#endif
inline void list_account_records_response::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.list_account_records_response.desc)
}
inline void list_account_records_response::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.list_account_records_response.desc)
}
inline ::std::string* list_account_records_response::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:tutorial.list_account_records_response.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* list_account_records_response::release_desc() {
  // @@protoc_insertion_point(field_release:tutorial.list_account_records_response.desc)
  if (!has_desc()) {
    return NULL;
  }
  clear_has_desc();
  return desc_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void list_account_records_response::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:tutorial.list_account_records_response.desc)
}

// repeated .tutorial.list_account_records_response.account_record records = 3;
inline int list_account_records_response::records_size() const {
  return records_.size();
}
inline void list_account_records_response::clear_records() {
  records_.Clear();
}
inline ::tutorial::list_account_records_response_account_record* list_account_records_response::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.list_account_records_response.records)
  return records_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::list_account_records_response_account_record >*
list_account_records_response::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.list_account_records_response.records)
  return &records_;
}
inline const ::tutorial::list_account_records_response_account_record& list_account_records_response::records(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.list_account_records_response.records)
  return records_.Get(index);
}
inline ::tutorial::list_account_records_response_account_record* list_account_records_response::add_records() {
  // @@protoc_insertion_point(field_add:tutorial.list_account_records_response.records)
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::list_account_records_response_account_record >&
list_account_records_response::records() const {
  // @@protoc_insertion_point(field_list:tutorial.list_account_records_response.records)
  return records_;
}

// -------------------------------------------------------------------

// list_travel_records_request

// required string userName = 1;
inline bool list_travel_records_request::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_travel_records_request::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_travel_records_request::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_travel_records_request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& list_travel_records_request::username() const {
  // @@protoc_insertion_point(field_get:tutorial.list_travel_records_request.userName)
  return username_.GetNoArena();
}
inline void list_travel_records_request::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.list_travel_records_request.userName)
}
#if LANG_CXX11
inline void list_travel_records_request::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.list_travel_records_request.userName)
}
#endif
inline void list_travel_records_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.list_travel_records_request.userName)
}
inline void list_travel_records_request::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.list_travel_records_request.userName)
}
inline ::std::string* list_travel_records_request::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:tutorial.list_travel_records_request.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* list_travel_records_request::release_username() {
  // @@protoc_insertion_point(field_release:tutorial.list_travel_records_request.userName)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void list_travel_records_request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tutorial.list_travel_records_request.userName)
}

// -------------------------------------------------------------------

// list_travel_records_response_travel_record

// required uint64 stm = 1;
inline bool list_travel_records_response_travel_record::has_stm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_travel_records_response_travel_record::set_has_stm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_travel_records_response_travel_record::clear_has_stm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_travel_records_response_travel_record::clear_stm() {
  stm_ = GOOGLE_ULONGLONG(0);
  clear_has_stm();
}
inline ::google::protobuf::uint64 list_travel_records_response_travel_record::stm() const {
  // @@protoc_insertion_point(field_get:tutorial.list_travel_records_response.travel_record.stm)
  return stm_;
}
inline void list_travel_records_response_travel_record::set_stm(::google::protobuf::uint64 value) {
  set_has_stm();
  stm_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_travel_records_response.travel_record.stm)
}

// required uint32 duration = 2;
inline bool list_travel_records_response_travel_record::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void list_travel_records_response_travel_record::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void list_travel_records_response_travel_record::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void list_travel_records_response_travel_record::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 list_travel_records_response_travel_record::duration() const {
  // @@protoc_insertion_point(field_get:tutorial.list_travel_records_response.travel_record.duration)
  return duration_;
}
inline void list_travel_records_response_travel_record::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_travel_records_response.travel_record.duration)
}

// required uint32 amount = 3;
inline bool list_travel_records_response_travel_record::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void list_travel_records_response_travel_record::set_has_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void list_travel_records_response_travel_record::clear_has_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void list_travel_records_response_travel_record::clear_amount() {
  amount_ = 0u;
  clear_has_amount();
}
inline ::google::protobuf::uint32 list_travel_records_response_travel_record::amount() const {
  // @@protoc_insertion_point(field_get:tutorial.list_travel_records_response.travel_record.amount)
  return amount_;
}
inline void list_travel_records_response_travel_record::set_amount(::google::protobuf::uint32 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_travel_records_response.travel_record.amount)
}

// -------------------------------------------------------------------

// list_travel_records_response

// required int32 resCode = 1;
inline bool list_travel_records_response::has_rescode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void list_travel_records_response::set_has_rescode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void list_travel_records_response::clear_has_rescode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void list_travel_records_response::clear_rescode() {
  rescode_ = 0;
  clear_has_rescode();
}
inline ::google::protobuf::int32 list_travel_records_response::rescode() const {
  // @@protoc_insertion_point(field_get:tutorial.list_travel_records_response.resCode)
  return rescode_;
}
inline void list_travel_records_response::set_rescode(::google::protobuf::int32 value) {
  set_has_rescode();
  rescode_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_travel_records_response.resCode)
}

// optional string desc = 2;
inline bool list_travel_records_response::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_travel_records_response::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_travel_records_response::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_travel_records_response::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& list_travel_records_response::desc() const {
  // @@protoc_insertion_point(field_get:tutorial.list_travel_records_response.desc)
  return desc_.GetNoArena();
}
inline void list_travel_records_response::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.list_travel_records_response.desc)
}
#if LANG_CXX11
inline void list_travel_records_response::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.list_travel_records_response.desc)
}
#endif
inline void list_travel_records_response::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.list_travel_records_response.desc)
}
inline void list_travel_records_response::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.list_travel_records_response.desc)
}
inline ::std::string* list_travel_records_response::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:tutorial.list_travel_records_response.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* list_travel_records_response::release_desc() {
  // @@protoc_insertion_point(field_release:tutorial.list_travel_records_response.desc)
  if (!has_desc()) {
    return NULL;
  }
  clear_has_desc();
  return desc_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void list_travel_records_response::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:tutorial.list_travel_records_response.desc)
}

// required double mileage = 3;
inline bool list_travel_records_response::has_mileage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void list_travel_records_response::set_has_mileage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void list_travel_records_response::clear_has_mileage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void list_travel_records_response::clear_mileage() {
  mileage_ = 0;
  clear_has_mileage();
}
inline double list_travel_records_response::mileage() const {
  // @@protoc_insertion_point(field_get:tutorial.list_travel_records_response.mileage)
  return mileage_;
}
inline void list_travel_records_response::set_mileage(double value) {
  set_has_mileage();
  mileage_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_travel_records_response.mileage)
}

// required double discharge = 4;
inline bool list_travel_records_response::has_discharge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void list_travel_records_response::set_has_discharge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void list_travel_records_response::clear_has_discharge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void list_travel_records_response::clear_discharge() {
  discharge_ = 0;
  clear_has_discharge();
}
inline double list_travel_records_response::discharge() const {
  // @@protoc_insertion_point(field_get:tutorial.list_travel_records_response.discharge)
  return discharge_;
}
inline void list_travel_records_response::set_discharge(double value) {
  set_has_discharge();
  discharge_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_travel_records_response.discharge)
}

// required double calorie = 5;
inline bool list_travel_records_response::has_calorie() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void list_travel_records_response::set_has_calorie() {
  _has_bits_[0] |= 0x00000008u;
}
inline void list_travel_records_response::clear_has_calorie() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void list_travel_records_response::clear_calorie() {
  calorie_ = 0;
  clear_has_calorie();
}
inline double list_travel_records_response::calorie() const {
  // @@protoc_insertion_point(field_get:tutorial.list_travel_records_response.calorie)
  return calorie_;
}
inline void list_travel_records_response::set_calorie(double value) {
  set_has_calorie();
  calorie_ = value;
  // @@protoc_insertion_point(field_set:tutorial.list_travel_records_response.calorie)
}

// repeated .tutorial.list_travel_records_response.travel_record records = 6;
inline int list_travel_records_response::records_size() const {
  return records_.size();
}
inline void list_travel_records_response::clear_records() {
  records_.Clear();
}
inline ::tutorial::list_travel_records_response_travel_record* list_travel_records_response::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.list_travel_records_response.records)
  return records_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::list_travel_records_response_travel_record >*
list_travel_records_response::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.list_travel_records_response.records)
  return &records_;
}
inline const ::tutorial::list_travel_records_response_travel_record& list_travel_records_response::records(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.list_travel_records_response.records)
  return records_.Get(index);
}
inline ::tutorial::list_travel_records_response_travel_record* list_travel_records_response::add_records() {
  // @@protoc_insertion_point(field_add:tutorial.list_travel_records_response.records)
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::list_travel_records_response_travel_record >&
list_travel_records_response::records() const {
  // @@protoc_insertion_point(field_list:tutorial.list_travel_records_response.records)
  return records_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_bike_2eproto
