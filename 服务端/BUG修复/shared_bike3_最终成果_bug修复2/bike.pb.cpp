// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bike.proto

#include "bike.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_bike_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bike_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_list_account_records_response_account_record;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bike_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_list_all_bikeinfo_response_bikeinfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bike_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_list_travel_records_response_travel_record;
}  // namespace protobuf_bike_2eproto
namespace tutorial {
class mobile_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mobile_request>
      _instance;
} _mobile_request_default_instance_;
class mobile_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mobile_response>
      _instance;
} _mobile_response_default_instance_;
class addBike_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<addBike_request>
      _instance;
} _addBike_request_default_instance_;
class addBike_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<addBike_response>
      _instance;
} _addBike_response_default_instance_;
class deleteBike_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<deleteBike_request>
      _instance;
} _deleteBike_request_default_instance_;
class deleteBike_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<deleteBike_response>
      _instance;
} _deleteBike_response_default_instance_;
class registerUser_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<registerUser_request>
      _instance;
} _registerUser_request_default_instance_;
class registerUser_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<registerUser_response>
      _instance;
} _registerUser_response_default_instance_;
class login_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<login_request>
      _instance;
} _login_request_default_instance_;
class login_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<login_response>
      _instance;
} _login_response_default_instance_;
class recharge_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<recharge_request>
      _instance;
} _recharge_request_default_instance_;
class recharge_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<recharge_response>
      _instance;
} _recharge_response_default_instance_;
class account_balance_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<account_balance_request>
      _instance;
} _account_balance_request_default_instance_;
class account_balance_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<account_balance_response>
      _instance;
} _account_balance_response_default_instance_;
class broadcast_msg_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<broadcast_msg_request>
      _instance;
} _broadcast_msg_request_default_instance_;
class broadcast_msg_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<broadcast_msg_response>
      _instance;
} _broadcast_msg_response_default_instance_;
class bike_scanQR_start_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bike_scanQR_start_request>
      _instance;
} _bike_scanQR_start_request_default_instance_;
class bike_scanQR_start_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bike_scanQR_start_response>
      _instance;
} _bike_scanQR_start_response_default_instance_;
class bike_scanQR_end_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bike_scanQR_end_request>
      _instance;
} _bike_scanQR_end_request_default_instance_;
class bike_scanQR_end_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bike_scanQR_end_response>
      _instance;
} _bike_scanQR_end_response_default_instance_;
class bike_fault_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bike_fault_request>
      _instance;
} _bike_fault_request_default_instance_;
class bike_fault_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bike_fault_response>
      _instance;
} _bike_fault_response_default_instance_;
class bike_repair_finish_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bike_repair_finish_request>
      _instance;
} _bike_repair_finish_request_default_instance_;
class bike_repair_finish_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bike_repair_finish_response>
      _instance;
} _bike_repair_finish_response_default_instance_;
class list_all_bikeinfo_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<list_all_bikeinfo_request>
      _instance;
} _list_all_bikeinfo_request_default_instance_;
class list_all_bikeinfo_response_bikeinfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<list_all_bikeinfo_response_bikeinfo>
      _instance;
} _list_all_bikeinfo_response_bikeinfo_default_instance_;
class list_all_bikeinfo_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<list_all_bikeinfo_response>
      _instance;
} _list_all_bikeinfo_response_default_instance_;
class list_account_records_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<list_account_records_request>
      _instance;
} _list_account_records_request_default_instance_;
class list_account_records_response_account_recordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<list_account_records_response_account_record>
      _instance;
} _list_account_records_response_account_record_default_instance_;
class list_account_records_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<list_account_records_response>
      _instance;
} _list_account_records_response_default_instance_;
class list_travel_records_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<list_travel_records_request>
      _instance;
} _list_travel_records_request_default_instance_;
class list_travel_records_response_travel_recordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<list_travel_records_response_travel_record>
      _instance;
} _list_travel_records_response_travel_record_default_instance_;
class list_travel_records_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<list_travel_records_response>
      _instance;
} _list_travel_records_response_default_instance_;
}  // namespace tutorial
namespace protobuf_bike_2eproto {
static void InitDefaultsmobile_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_mobile_request_default_instance_;
    new (ptr) ::tutorial::mobile_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::mobile_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mobile_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmobile_request}, {}};

static void InitDefaultsmobile_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_mobile_response_default_instance_;
    new (ptr) ::tutorial::mobile_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::mobile_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mobile_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmobile_response}, {}};

static void InitDefaultsaddBike_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_addBike_request_default_instance_;
    new (ptr) ::tutorial::addBike_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::addBike_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_addBike_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsaddBike_request}, {}};

static void InitDefaultsaddBike_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_addBike_response_default_instance_;
    new (ptr) ::tutorial::addBike_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::addBike_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_addBike_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsaddBike_response}, {}};

static void InitDefaultsdeleteBike_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_deleteBike_request_default_instance_;
    new (ptr) ::tutorial::deleteBike_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::deleteBike_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_deleteBike_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdeleteBike_request}, {}};

static void InitDefaultsdeleteBike_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_deleteBike_response_default_instance_;
    new (ptr) ::tutorial::deleteBike_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::deleteBike_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_deleteBike_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdeleteBike_response}, {}};

static void InitDefaultsregisterUser_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_registerUser_request_default_instance_;
    new (ptr) ::tutorial::registerUser_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::registerUser_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_registerUser_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsregisterUser_request}, {}};

static void InitDefaultsregisterUser_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_registerUser_response_default_instance_;
    new (ptr) ::tutorial::registerUser_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::registerUser_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_registerUser_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsregisterUser_response}, {}};

static void InitDefaultslogin_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_login_request_default_instance_;
    new (ptr) ::tutorial::login_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::login_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_login_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslogin_request}, {}};

static void InitDefaultslogin_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_login_response_default_instance_;
    new (ptr) ::tutorial::login_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::login_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_login_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslogin_response}, {}};

static void InitDefaultsrecharge_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_recharge_request_default_instance_;
    new (ptr) ::tutorial::recharge_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::recharge_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_recharge_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrecharge_request}, {}};

static void InitDefaultsrecharge_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_recharge_response_default_instance_;
    new (ptr) ::tutorial::recharge_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::recharge_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_recharge_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrecharge_response}, {}};

static void InitDefaultsaccount_balance_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_account_balance_request_default_instance_;
    new (ptr) ::tutorial::account_balance_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::account_balance_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_account_balance_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsaccount_balance_request}, {}};

static void InitDefaultsaccount_balance_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_account_balance_response_default_instance_;
    new (ptr) ::tutorial::account_balance_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::account_balance_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_account_balance_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsaccount_balance_response}, {}};

static void InitDefaultsbroadcast_msg_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_broadcast_msg_request_default_instance_;
    new (ptr) ::tutorial::broadcast_msg_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::broadcast_msg_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_broadcast_msg_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbroadcast_msg_request}, {}};

static void InitDefaultsbroadcast_msg_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_broadcast_msg_response_default_instance_;
    new (ptr) ::tutorial::broadcast_msg_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::broadcast_msg_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_broadcast_msg_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbroadcast_msg_response}, {}};

static void InitDefaultsbike_scanQR_start_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_bike_scanQR_start_request_default_instance_;
    new (ptr) ::tutorial::bike_scanQR_start_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::bike_scanQR_start_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_bike_scanQR_start_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbike_scanQR_start_request}, {}};

static void InitDefaultsbike_scanQR_start_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_bike_scanQR_start_response_default_instance_;
    new (ptr) ::tutorial::bike_scanQR_start_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::bike_scanQR_start_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_bike_scanQR_start_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbike_scanQR_start_response}, {}};

static void InitDefaultsbike_scanQR_end_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_bike_scanQR_end_request_default_instance_;
    new (ptr) ::tutorial::bike_scanQR_end_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::bike_scanQR_end_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_bike_scanQR_end_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbike_scanQR_end_request}, {}};

static void InitDefaultsbike_scanQR_end_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_bike_scanQR_end_response_default_instance_;
    new (ptr) ::tutorial::bike_scanQR_end_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::bike_scanQR_end_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_bike_scanQR_end_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbike_scanQR_end_response}, {}};

static void InitDefaultsbike_fault_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_bike_fault_request_default_instance_;
    new (ptr) ::tutorial::bike_fault_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::bike_fault_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_bike_fault_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbike_fault_request}, {}};

static void InitDefaultsbike_fault_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_bike_fault_response_default_instance_;
    new (ptr) ::tutorial::bike_fault_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::bike_fault_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_bike_fault_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbike_fault_response}, {}};

static void InitDefaultsbike_repair_finish_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_bike_repair_finish_request_default_instance_;
    new (ptr) ::tutorial::bike_repair_finish_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::bike_repair_finish_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_bike_repair_finish_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbike_repair_finish_request}, {}};

static void InitDefaultsbike_repair_finish_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_bike_repair_finish_response_default_instance_;
    new (ptr) ::tutorial::bike_repair_finish_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::bike_repair_finish_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_bike_repair_finish_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbike_repair_finish_response}, {}};

static void InitDefaultslist_all_bikeinfo_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_list_all_bikeinfo_request_default_instance_;
    new (ptr) ::tutorial::list_all_bikeinfo_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::list_all_bikeinfo_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_list_all_bikeinfo_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslist_all_bikeinfo_request}, {}};

static void InitDefaultslist_all_bikeinfo_response_bikeinfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_list_all_bikeinfo_response_bikeinfo_default_instance_;
    new (ptr) ::tutorial::list_all_bikeinfo_response_bikeinfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::list_all_bikeinfo_response_bikeinfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_list_all_bikeinfo_response_bikeinfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslist_all_bikeinfo_response_bikeinfo}, {}};

static void InitDefaultslist_all_bikeinfo_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_list_all_bikeinfo_response_default_instance_;
    new (ptr) ::tutorial::list_all_bikeinfo_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::list_all_bikeinfo_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_list_all_bikeinfo_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultslist_all_bikeinfo_response}, {
      &protobuf_bike_2eproto::scc_info_list_all_bikeinfo_response_bikeinfo.base,}};

static void InitDefaultslist_account_records_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_list_account_records_request_default_instance_;
    new (ptr) ::tutorial::list_account_records_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::list_account_records_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_list_account_records_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslist_account_records_request}, {}};

static void InitDefaultslist_account_records_response_account_record() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_list_account_records_response_account_record_default_instance_;
    new (ptr) ::tutorial::list_account_records_response_account_record();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::list_account_records_response_account_record::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_list_account_records_response_account_record =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslist_account_records_response_account_record}, {}};

static void InitDefaultslist_account_records_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_list_account_records_response_default_instance_;
    new (ptr) ::tutorial::list_account_records_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::list_account_records_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_list_account_records_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultslist_account_records_response}, {
      &protobuf_bike_2eproto::scc_info_list_account_records_response_account_record.base,}};

static void InitDefaultslist_travel_records_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_list_travel_records_request_default_instance_;
    new (ptr) ::tutorial::list_travel_records_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::list_travel_records_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_list_travel_records_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslist_travel_records_request}, {}};

static void InitDefaultslist_travel_records_response_travel_record() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_list_travel_records_response_travel_record_default_instance_;
    new (ptr) ::tutorial::list_travel_records_response_travel_record();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::list_travel_records_response_travel_record::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_list_travel_records_response_travel_record =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslist_travel_records_response_travel_record}, {}};

static void InitDefaultslist_travel_records_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_list_travel_records_response_default_instance_;
    new (ptr) ::tutorial::list_travel_records_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::list_travel_records_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_list_travel_records_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultslist_travel_records_response}, {
      &protobuf_bike_2eproto::scc_info_list_travel_records_response_travel_record.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_mobile_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mobile_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_addBike_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_addBike_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_deleteBike_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_deleteBike_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_registerUser_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_registerUser_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_login_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_login_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_recharge_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_recharge_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_account_balance_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_account_balance_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_broadcast_msg_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_broadcast_msg_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bike_scanQR_start_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bike_scanQR_start_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bike_scanQR_end_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bike_scanQR_end_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bike_fault_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bike_fault_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bike_repair_finish_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bike_repair_finish_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_list_all_bikeinfo_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_list_all_bikeinfo_response_bikeinfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_list_all_bikeinfo_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_list_account_records_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_list_account_records_response_account_record.base);
  ::google::protobuf::internal::InitSCC(&scc_info_list_account_records_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_list_travel_records_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_list_travel_records_response_travel_record.base);
  ::google::protobuf::internal::InitSCC(&scc_info_list_travel_records_response.base);
}

::google::protobuf::Metadata file_level_metadata[33];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::mobile_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::mobile_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::mobile_request, username_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::mobile_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::mobile_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::mobile_response, rescode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::mobile_response, vercode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::mobile_response, data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::addBike_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::addBike_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::addBike_request, bikeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::addBike_request, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::addBike_request, latitude_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::addBike_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::addBike_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::addBike_response, bikeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::addBike_response, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::addBike_response, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::addBike_response, rescode_),
  1,
  0,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::deleteBike_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::deleteBike_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::deleteBike_request, bikeid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::deleteBike_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::deleteBike_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::deleteBike_response, bikeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::deleteBike_response, rescode_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::registerUser_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::registerUser_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::registerUser_request, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::registerUser_request, userpwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::registerUser_request, vercode_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::registerUser_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::registerUser_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::registerUser_response, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::registerUser_response, userpwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::registerUser_response, vercode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::registerUser_response, rescode_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::login_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::login_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::login_request, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::login_request, userpwd_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::login_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::login_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::login_response, rescode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::login_response, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::login_response, userpwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::login_response, userlevel_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::recharge_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::recharge_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::recharge_request, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::recharge_request, amount_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::recharge_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::recharge_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::recharge_response, rescode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::recharge_response, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::recharge_response, balance_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::account_balance_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::account_balance_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::account_balance_request, username_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::account_balance_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::account_balance_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::account_balance_response, rescode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::account_balance_response, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::account_balance_response, balance_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::broadcast_msg_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::broadcast_msg_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::broadcast_msg_request, bikeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::broadcast_msg_request, bikestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::broadcast_msg_request, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::broadcast_msg_request, latitude_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::broadcast_msg_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::broadcast_msg_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::broadcast_msg_response, bikeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::broadcast_msg_response, bikestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::broadcast_msg_response, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::broadcast_msg_response, latitude_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_start_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_start_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_start_request, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_start_request, bikeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_start_request, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_start_request, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_start_request, latitude_),
  0,
  4,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_start_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_start_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_start_response, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_start_response, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_start_response, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_start_response, rescode_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_request, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_request, bikeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_request, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_request, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_request, latitude_),
  0,
  4,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_response, consume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_response, balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_response, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_response, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_response, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_scanQR_end_response, rescode_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_fault_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_fault_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_fault_request, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_fault_request, bike_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_fault_request, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_fault_request, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_fault_request, latitude_),
  0,
  4,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_fault_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_fault_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_fault_response, rescode_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_repair_finish_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_repair_finish_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_repair_finish_request, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_repair_finish_request, bike_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_repair_finish_request, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_repair_finish_request, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_repair_finish_request, latitude_),
  0,
  4,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_repair_finish_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_repair_finish_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::bike_repair_finish_response, rescode_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_request, username_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_response_bikeinfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_response_bikeinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_response_bikeinfo, bikeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_response_bikeinfo, bikestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_response_bikeinfo, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_response_bikeinfo, latitude_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_response, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_response, rescode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_all_bikeinfo_response, records_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_account_records_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_account_records_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_account_records_request, username_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_account_records_response_account_record, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_account_records_response_account_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_account_records_response_account_record, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_account_records_response_account_record, consume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_account_records_response_account_record, timestamp_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_account_records_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_account_records_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_account_records_response, rescode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_account_records_response, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_account_records_response, records_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_request, username_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_response_travel_record, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_response_travel_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_response_travel_record, stm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_response_travel_record, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_response_travel_record, amount_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_response, rescode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_response, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_response, mileage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_response, discharge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_response, calorie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tutorial::list_travel_records_response, records_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::tutorial::mobile_request)},
  { 7, 15, sizeof(::tutorial::mobile_response)},
  { 18, 26, sizeof(::tutorial::addBike_request)},
  { 29, 38, sizeof(::tutorial::addBike_response)},
  { 42, 48, sizeof(::tutorial::deleteBike_request)},
  { 49, 56, sizeof(::tutorial::deleteBike_response)},
  { 58, 66, sizeof(::tutorial::registerUser_request)},
  { 69, 78, sizeof(::tutorial::registerUser_response)},
  { 82, 89, sizeof(::tutorial::login_request)},
  { 91, 100, sizeof(::tutorial::login_response)},
  { 104, 111, sizeof(::tutorial::recharge_request)},
  { 113, 121, sizeof(::tutorial::recharge_response)},
  { 124, 130, sizeof(::tutorial::account_balance_request)},
  { 131, 139, sizeof(::tutorial::account_balance_response)},
  { 142, 151, sizeof(::tutorial::broadcast_msg_request)},
  { 155, 164, sizeof(::tutorial::broadcast_msg_response)},
  { 168, 178, sizeof(::tutorial::bike_scanQR_start_request)},
  { 183, 192, sizeof(::tutorial::bike_scanQR_start_response)},
  { 196, 206, sizeof(::tutorial::bike_scanQR_end_request)},
  { 211, 222, sizeof(::tutorial::bike_scanQR_end_response)},
  { 228, 238, sizeof(::tutorial::bike_fault_request)},
  { 243, 249, sizeof(::tutorial::bike_fault_response)},
  { 250, 260, sizeof(::tutorial::bike_repair_finish_request)},
  { 265, 271, sizeof(::tutorial::bike_repair_finish_response)},
  { 272, 278, sizeof(::tutorial::list_all_bikeinfo_request)},
  { 279, 288, sizeof(::tutorial::list_all_bikeinfo_response_bikeinfo)},
  { 292, 300, sizeof(::tutorial::list_all_bikeinfo_response)},
  { 303, 309, sizeof(::tutorial::list_account_records_request)},
  { 310, 318, sizeof(::tutorial::list_account_records_response_account_record)},
  { 321, 329, sizeof(::tutorial::list_account_records_response)},
  { 332, 338, sizeof(::tutorial::list_travel_records_request)},
  { 339, 347, sizeof(::tutorial::list_travel_records_response_travel_record)},
  { 350, 361, sizeof(::tutorial::list_travel_records_response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_mobile_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_mobile_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_addBike_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_addBike_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_deleteBike_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_deleteBike_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_registerUser_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_registerUser_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_login_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_login_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_recharge_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_recharge_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_account_balance_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_account_balance_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_broadcast_msg_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_broadcast_msg_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_bike_scanQR_start_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_bike_scanQR_start_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_bike_scanQR_end_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_bike_scanQR_end_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_bike_fault_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_bike_fault_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_bike_repair_finish_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_bike_repair_finish_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_list_all_bikeinfo_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_list_all_bikeinfo_response_bikeinfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_list_all_bikeinfo_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_list_account_records_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_list_account_records_response_account_record_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_list_account_records_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_list_travel_records_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_list_travel_records_response_travel_record_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tutorial::_list_travel_records_response_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "bike.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 33);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nbike.proto\022\010tutorial\"\"\n\016mobile_request"
      "\022\020\n\010userName\030\001 \002(\t\"A\n\017mobile_response\022\017\n"
      "\007resCode\030\001 \002(\005\022\017\n\007verCode\030\002 \002(\005\022\014\n\004data\030"
      "\003 \001(\t\"F\n\017addBike_request\022\016\n\006bikeId\030\001 \002(\005"
      "\022\021\n\tlongitude\030\002 \002(\001\022\020\n\010latitude\030\003 \002(\001\"X\n"
      "\020addBike_response\022\016\n\006bikeId\030\001 \002(\005\022\021\n\tlon"
      "gitude\030\002 \002(\001\022\020\n\010latitude\030\003 \002(\001\022\017\n\007resCod"
      "e\030\004 \002(\005\"$\n\022deleteBike_request\022\016\n\006bikeId\030"
      "\001 \002(\005\"6\n\023deleteBike_response\022\016\n\006bikeId\030\001"
      " \002(\005\022\017\n\007resCode\030\002 \002(\005\"J\n\024registerUser_re"
      "quest\022\020\n\010userName\030\001 \002(\t\022\017\n\007userPwd\030\002 \002(\t"
      "\022\017\n\007verCode\030\003 \002(\005\"\\\n\025registerUser_respon"
      "se\022\020\n\010userName\030\001 \002(\t\022\017\n\007userPwd\030\002 \002(\t\022\017\n"
      "\007verCode\030\003 \001(\005\022\017\n\007resCode\030\004 \002(\005\"2\n\rlogin"
      "_request\022\020\n\010userName\030\001 \002(\t\022\017\n\007userPwd\030\002 "
      "\002(\t\"W\n\016login_response\022\017\n\007resCode\030\001 \002(\005\022\020"
      "\n\010userName\030\002 \002(\t\022\017\n\007userPwd\030\003 \002(\t\022\021\n\tuse"
      "rLevel\030\004 \001(\005\"4\n\020recharge_request\022\020\n\010user"
      "Name\030\001 \002(\t\022\016\n\006amount\030\002 \002(\005\"C\n\021recharge_r"
      "esponse\022\017\n\007resCode\030\001 \002(\005\022\014\n\004desc\030\002 \001(\t\022\017"
      "\n\007balance\030\003 \002(\005\"+\n\027account_balance_reque"
      "st\022\020\n\010userName\030\001 \002(\t\"J\n\030account_balance_"
      "response\022\017\n\007resCode\030\001 \002(\005\022\014\n\004desc\030\002 \001(\t\022"
      "\017\n\007balance\030\003 \002(\005\"`\n\025broadcast_msg_reques"
      "t\022\016\n\006bikeId\030\001 \002(\005\022\022\n\nbikeStatus\030\002 \002(\005\022\021\n"
      "\tlongitude\030\003 \002(\001\022\020\n\010latitude\030\004 \002(\001\"a\n\026br"
      "oadcast_msg_response\022\016\n\006bikeId\030\001 \002(\005\022\022\n\n"
      "bikeStatus\030\002 \002(\005\022\021\n\tlongitude\030\003 \002(\001\022\020\n\010l"
      "atitude\030\004 \002(\001\"u\n\031bike_scanQR_start_reque"
      "st\022\020\n\010userName\030\001 \002(\t\022\016\n\006bikeId\030\002 \002(\005\022\021\n\t"
      "timestamp\030\003 \002(\004\022\021\n\tlongitude\030\004 \002(\001\022\020\n\010la"
      "titude\030\005 \002(\001\"e\n\032bike_scanQR_start_respon"
      "se\022\021\n\ttimestamp\030\001 \002(\004\022\021\n\tlongitude\030\002 \002(\001"
      "\022\020\n\010latitude\030\003 \002(\001\022\017\n\007resCode\030\004 \002(\005\"s\n\027b"
      "ike_scanQR_end_request\022\020\n\010userName\030\001 \002(\t"
      "\022\016\n\006bikeId\030\002 \002(\005\022\021\n\ttimestamp\030\003 \002(\004\022\021\n\tl"
      "ongitude\030\004 \002(\001\022\020\n\010latitude\030\005 \002(\001\"\205\001\n\030bik"
      "e_scanQR_end_response\022\017\n\007consume\030\001 \002(\005\022\017"
      "\n\007balance\030\002 \002(\005\022\021\n\ttimestamp\030\003 \002(\004\022\021\n\tlo"
      "ngitude\030\004 \002(\001\022\020\n\010latitude\030\005 \002(\001\022\017\n\007resCo"
      "de\030\006 \002(\005\"o\n\022bike_fault_request\022\020\n\010userNa"
      "me\030\001 \002(\t\022\017\n\007bike_id\030\002 \002(\r\022\021\n\ttimestamp\030\003"
      " \002(\004\022\021\n\tlongitude\030\004 \002(\001\022\020\n\010latitude\030\005 \002("
      "\001\"&\n\023bike_fault_response\022\017\n\007resCode\030\001 \002("
      "\005\"w\n\032bike_repair_finish_request\022\020\n\010userN"
      "ame\030\001 \002(\t\022\017\n\007bike_id\030\002 \002(\r\022\021\n\ttimestamp\030"
      "\003 \002(\004\022\021\n\tlongitude\030\004 \002(\001\022\020\n\010latitude\030\005 \002"
      "(\001\".\n\033bike_repair_finish_response\022\017\n\007res"
      "Code\030\001 \002(\005\"-\n\031list_all_bikeinfo_request\022"
      "\020\n\010userName\030\001 \002(\t\"\324\001\n\032list_all_bikeinfo_"
      "response\022\020\n\010userName\030\001 \002(\t\022\017\n\007resCode\030\002 "
      "\002(\005\022>\n\007records\030\003 \003(\0132-.tutorial.list_all"
      "_bikeinfo_response.bikeinfo\032S\n\010bikeinfo\022"
      "\016\n\006bikeId\030\001 \002(\005\022\022\n\nbikeStatus\030\002 \002(\005\022\021\n\tl"
      "ongitude\030\004 \002(\001\022\020\n\010latitude\030\005 \002(\001\"0\n\034list"
      "_account_records_request\022\020\n\010userName\030\001 \002"
      "(\t\"\313\001\n\035list_account_records_response\022\017\n\007"
      "resCode\030\001 \002(\005\022\014\n\004desc\030\002 \001(\t\022G\n\007records\030\003"
      " \003(\01326.tutorial.list_account_records_res"
      "ponse.account_record\032B\n\016account_record\022\014"
      "\n\004type\030\001 \002(\005\022\017\n\007consume\030\002 \002(\005\022\021\n\ttimesta"
      "mp\030\003 \002(\004\"/\n\033list_travel_records_request\022"
      "\020\n\010userName\030\001 \002(\t\"\371\001\n\034list_travel_record"
      "s_response\022\017\n\007resCode\030\001 \002(\005\022\014\n\004desc\030\002 \001("
      "\t\022\017\n\007mileage\030\003 \002(\001\022\021\n\tdischarge\030\004 \002(\001\022\017\n"
      "\007calorie\030\005 \002(\001\022E\n\007records\030\006 \003(\01324.tutori"
      "al.list_travel_records_response.travel_r"
      "ecord\032>\n\rtravel_record\022\013\n\003stm\030\001 \002(\004\022\020\n\010d"
      "uration\030\002 \002(\r\022\016\n\006amount\030\003 \002(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2749);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bike.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_bike_2eproto
namespace tutorial {

// ===================================================================

void mobile_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mobile_request::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mobile_request::mobile_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_mobile_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.mobile_request)
}
mobile_request::mobile_request(const mobile_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.mobile_request)
}

void mobile_request::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mobile_request::~mobile_request() {
  // @@protoc_insertion_point(destructor:tutorial.mobile_request)
  SharedDtor();
}

void mobile_request::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mobile_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* mobile_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mobile_request& mobile_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_mobile_request.base);
  return *internal_default_instance();
}


void mobile_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.mobile_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mobile_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.mobile_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.mobile_request.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.mobile_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.mobile_request)
  return false;
#undef DO_
}

void mobile_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.mobile_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.mobile_request.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.mobile_request)
}

::google::protobuf::uint8* mobile_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.mobile_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.mobile_request.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.mobile_request)
  return target;
}

size_t mobile_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.mobile_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string userName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mobile_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.mobile_request)
  GOOGLE_DCHECK_NE(&from, this);
  const mobile_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mobile_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.mobile_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.mobile_request)
    MergeFrom(*source);
  }
}

void mobile_request::MergeFrom(const mobile_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.mobile_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    set_has_username();
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void mobile_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.mobile_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mobile_request::CopyFrom(const mobile_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.mobile_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mobile_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void mobile_request::Swap(mobile_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mobile_request::InternalSwap(mobile_request* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mobile_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void mobile_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mobile_response::kResCodeFieldNumber;
const int mobile_response::kVerCodeFieldNumber;
const int mobile_response::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mobile_response::mobile_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_mobile_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.mobile_response)
}
mobile_response::mobile_response(const mobile_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&rescode_, &from.rescode_,
    static_cast<size_t>(reinterpret_cast<char*>(&vercode_) -
    reinterpret_cast<char*>(&rescode_)) + sizeof(vercode_));
  // @@protoc_insertion_point(copy_constructor:tutorial.mobile_response)
}

void mobile_response::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rescode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vercode_) -
      reinterpret_cast<char*>(&rescode_)) + sizeof(vercode_));
}

mobile_response::~mobile_response() {
  // @@protoc_insertion_point(destructor:tutorial.mobile_response)
  SharedDtor();
}

void mobile_response::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mobile_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* mobile_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mobile_response& mobile_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_mobile_response.base);
  return *internal_default_instance();
}


void mobile_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.mobile_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&rescode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vercode_) -
        reinterpret_cast<char*>(&rescode_)) + sizeof(vercode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mobile_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.mobile_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 verCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_vercode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vercode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.mobile_response.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.mobile_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.mobile_response)
  return false;
#undef DO_
}

void mobile_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.mobile_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rescode(), output);
  }

  // required int32 verCode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vercode(), output);
  }

  // optional string data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.mobile_response.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.mobile_response)
}

::google::protobuf::uint8* mobile_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.mobile_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rescode(), target);
  }

  // required int32 verCode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vercode(), target);
  }

  // optional string data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.mobile_response.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.mobile_response)
  return target;
}

size_t mobile_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.mobile_response)
  size_t total_size = 0;

  if (has_rescode()) {
    // required int32 resCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }

  if (has_vercode()) {
    // required int32 verCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vercode());
  }

  return total_size;
}
size_t mobile_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.mobile_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 resCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());

    // required int32 verCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vercode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string data = 3;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mobile_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.mobile_response)
  GOOGLE_DCHECK_NE(&from, this);
  const mobile_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mobile_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.mobile_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.mobile_response)
    MergeFrom(*source);
  }
}

void mobile_response::MergeFrom(const mobile_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.mobile_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      rescode_ = from.rescode_;
    }
    if (cached_has_bits & 0x00000004u) {
      vercode_ = from.vercode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mobile_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.mobile_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mobile_response::CopyFrom(const mobile_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.mobile_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mobile_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void mobile_response::Swap(mobile_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mobile_response::InternalSwap(mobile_response* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rescode_, other->rescode_);
  swap(vercode_, other->vercode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mobile_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void addBike_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int addBike_request::kBikeIdFieldNumber;
const int addBike_request::kLongitudeFieldNumber;
const int addBike_request::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

addBike_request::addBike_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_addBike_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.addBike_request)
}
addBike_request::addBike_request(const addBike_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&bikeid_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(bikeid_));
  // @@protoc_insertion_point(copy_constructor:tutorial.addBike_request)
}

void addBike_request::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bikeid_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(bikeid_));
}

addBike_request::~addBike_request() {
  // @@protoc_insertion_point(destructor:tutorial.addBike_request)
  SharedDtor();
}

void addBike_request::SharedDtor() {
}

void addBike_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* addBike_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const addBike_request& addBike_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_addBike_request.base);
  return *internal_default_instance();
}


void addBike_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.addBike_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&longitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bikeid_) -
        reinterpret_cast<char*>(&longitude_)) + sizeof(bikeid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool addBike_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.addBike_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bikeId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bikeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bikeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.addBike_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.addBike_request)
  return false;
#undef DO_
}

void addBike_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.addBike_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bikeid(), output);
  }

  // required double longitude = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // required double latitude = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.addBike_request)
}

::google::protobuf::uint8* addBike_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.addBike_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bikeid(), target);
  }

  // required double longitude = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // required double latitude = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.addBike_request)
  return target;
}

size_t addBike_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.addBike_request)
  size_t total_size = 0;

  if (has_longitude()) {
    // required double longitude = 2;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 3;
    total_size += 1 + 8;
  }

  if (has_bikeid()) {
    // required int32 bikeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());
  }

  return total_size;
}
size_t addBike_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.addBike_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double longitude = 2;
    total_size += 1 + 8;

    // required double latitude = 3;
    total_size += 1 + 8;

    // required int32 bikeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void addBike_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.addBike_request)
  GOOGLE_DCHECK_NE(&from, this);
  const addBike_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const addBike_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.addBike_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.addBike_request)
    MergeFrom(*source);
  }
}

void addBike_request::MergeFrom(const addBike_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.addBike_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      bikeid_ = from.bikeid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void addBike_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.addBike_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addBike_request::CopyFrom(const addBike_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.addBike_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addBike_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void addBike_request::Swap(addBike_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void addBike_request::InternalSwap(addBike_request* other) {
  using std::swap;
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(bikeid_, other->bikeid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata addBike_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void addBike_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int addBike_response::kBikeIdFieldNumber;
const int addBike_response::kLongitudeFieldNumber;
const int addBike_response::kLatitudeFieldNumber;
const int addBike_response::kResCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

addBike_response::addBike_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_addBike_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.addBike_response)
}
addBike_response::addBike_response(const addBike_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:tutorial.addBike_response)
}

void addBike_response::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

addBike_response::~addBike_response() {
  // @@protoc_insertion_point(destructor:tutorial.addBike_response)
  SharedDtor();
}

void addBike_response::SharedDtor() {
}

void addBike_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* addBike_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const addBike_response& addBike_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_addBike_response.base);
  return *internal_default_instance();
}


void addBike_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.addBike_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&longitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latitude_) -
        reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool addBike_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.addBike_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bikeId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bikeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bikeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 resCode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.addBike_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.addBike_response)
  return false;
#undef DO_
}

void addBike_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.addBike_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bikeid(), output);
  }

  // required double longitude = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // required double latitude = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required int32 resCode = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rescode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.addBike_response)
}

::google::protobuf::uint8* addBike_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.addBike_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bikeid(), target);
  }

  // required double longitude = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // required double latitude = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // required int32 resCode = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rescode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.addBike_response)
  return target;
}

size_t addBike_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.addBike_response)
  size_t total_size = 0;

  if (has_longitude()) {
    // required double longitude = 2;
    total_size += 1 + 8;
  }

  if (has_bikeid()) {
    // required int32 bikeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());
  }

  if (has_rescode()) {
    // required int32 resCode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }

  if (has_latitude()) {
    // required double latitude = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t addBike_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.addBike_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double longitude = 2;
    total_size += 1 + 8;

    // required int32 bikeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());

    // required int32 resCode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());

    // required double latitude = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void addBike_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.addBike_response)
  GOOGLE_DCHECK_NE(&from, this);
  const addBike_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const addBike_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.addBike_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.addBike_response)
    MergeFrom(*source);
  }
}

void addBike_response::MergeFrom(const addBike_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.addBike_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      bikeid_ = from.bikeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      rescode_ = from.rescode_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void addBike_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.addBike_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addBike_response::CopyFrom(const addBike_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.addBike_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addBike_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void addBike_response::Swap(addBike_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void addBike_response::InternalSwap(addBike_response* other) {
  using std::swap;
  swap(longitude_, other->longitude_);
  swap(bikeid_, other->bikeid_);
  swap(rescode_, other->rescode_);
  swap(latitude_, other->latitude_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata addBike_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void deleteBike_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int deleteBike_request::kBikeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

deleteBike_request::deleteBike_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_deleteBike_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.deleteBike_request)
}
deleteBike_request::deleteBike_request(const deleteBike_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bikeid_ = from.bikeid_;
  // @@protoc_insertion_point(copy_constructor:tutorial.deleteBike_request)
}

void deleteBike_request::SharedCtor() {
  bikeid_ = 0;
}

deleteBike_request::~deleteBike_request() {
  // @@protoc_insertion_point(destructor:tutorial.deleteBike_request)
  SharedDtor();
}

void deleteBike_request::SharedDtor() {
}

void deleteBike_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* deleteBike_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const deleteBike_request& deleteBike_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_deleteBike_request.base);
  return *internal_default_instance();
}


void deleteBike_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.deleteBike_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bikeid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool deleteBike_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.deleteBike_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bikeId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bikeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bikeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.deleteBike_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.deleteBike_request)
  return false;
#undef DO_
}

void deleteBike_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.deleteBike_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bikeid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.deleteBike_request)
}

::google::protobuf::uint8* deleteBike_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.deleteBike_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bikeid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.deleteBike_request)
  return target;
}

size_t deleteBike_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.deleteBike_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 bikeId = 1;
  if (has_bikeid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void deleteBike_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.deleteBike_request)
  GOOGLE_DCHECK_NE(&from, this);
  const deleteBike_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const deleteBike_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.deleteBike_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.deleteBike_request)
    MergeFrom(*source);
  }
}

void deleteBike_request::MergeFrom(const deleteBike_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.deleteBike_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bikeid()) {
    set_bikeid(from.bikeid());
  }
}

void deleteBike_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.deleteBike_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deleteBike_request::CopyFrom(const deleteBike_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.deleteBike_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deleteBike_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void deleteBike_request::Swap(deleteBike_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void deleteBike_request::InternalSwap(deleteBike_request* other) {
  using std::swap;
  swap(bikeid_, other->bikeid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata deleteBike_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void deleteBike_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int deleteBike_response::kBikeIdFieldNumber;
const int deleteBike_response::kResCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

deleteBike_response::deleteBike_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_deleteBike_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.deleteBike_response)
}
deleteBike_response::deleteBike_response(const deleteBike_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bikeid_, &from.bikeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rescode_) -
    reinterpret_cast<char*>(&bikeid_)) + sizeof(rescode_));
  // @@protoc_insertion_point(copy_constructor:tutorial.deleteBike_response)
}

void deleteBike_response::SharedCtor() {
  ::memset(&bikeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rescode_) -
      reinterpret_cast<char*>(&bikeid_)) + sizeof(rescode_));
}

deleteBike_response::~deleteBike_response() {
  // @@protoc_insertion_point(destructor:tutorial.deleteBike_response)
  SharedDtor();
}

void deleteBike_response::SharedDtor() {
}

void deleteBike_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* deleteBike_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const deleteBike_response& deleteBike_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_deleteBike_response.base);
  return *internal_default_instance();
}


void deleteBike_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.deleteBike_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&bikeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rescode_) -
        reinterpret_cast<char*>(&bikeid_)) + sizeof(rescode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool deleteBike_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.deleteBike_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bikeId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bikeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bikeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 resCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.deleteBike_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.deleteBike_response)
  return false;
#undef DO_
}

void deleteBike_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.deleteBike_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bikeid(), output);
  }

  // required int32 resCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rescode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.deleteBike_response)
}

::google::protobuf::uint8* deleteBike_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.deleteBike_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bikeid(), target);
  }

  // required int32 resCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rescode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.deleteBike_response)
  return target;
}

size_t deleteBike_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.deleteBike_response)
  size_t total_size = 0;

  if (has_bikeid()) {
    // required int32 bikeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());
  }

  if (has_rescode()) {
    // required int32 resCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }

  return total_size;
}
size_t deleteBike_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.deleteBike_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 bikeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());

    // required int32 resCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void deleteBike_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.deleteBike_response)
  GOOGLE_DCHECK_NE(&from, this);
  const deleteBike_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const deleteBike_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.deleteBike_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.deleteBike_response)
    MergeFrom(*source);
  }
}

void deleteBike_response::MergeFrom(const deleteBike_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.deleteBike_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      bikeid_ = from.bikeid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rescode_ = from.rescode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void deleteBike_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.deleteBike_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deleteBike_response::CopyFrom(const deleteBike_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.deleteBike_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deleteBike_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void deleteBike_response::Swap(deleteBike_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void deleteBike_response::InternalSwap(deleteBike_response* other) {
  using std::swap;
  swap(bikeid_, other->bikeid_);
  swap(rescode_, other->rescode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata deleteBike_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void registerUser_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int registerUser_request::kUserNameFieldNumber;
const int registerUser_request::kUserPwdFieldNumber;
const int registerUser_request::kVerCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

registerUser_request::registerUser_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_registerUser_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.registerUser_request)
}
registerUser_request::registerUser_request(const registerUser_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userpwd()) {
    userpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpwd_);
  }
  vercode_ = from.vercode_;
  // @@protoc_insertion_point(copy_constructor:tutorial.registerUser_request)
}

void registerUser_request::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vercode_ = 0;
}

registerUser_request::~registerUser_request() {
  // @@protoc_insertion_point(destructor:tutorial.registerUser_request)
  SharedDtor();
}

void registerUser_request::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void registerUser_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* registerUser_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const registerUser_request& registerUser_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_registerUser_request.base);
  return *internal_default_instance();
}


void registerUser_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.registerUser_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      userpwd_.ClearNonDefaultToEmptyNoArena();
    }
  }
  vercode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool registerUser_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.registerUser_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.registerUser_request.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userPwd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpwd().data(), static_cast<int>(this->userpwd().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.registerUser_request.userPwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 verCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_vercode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vercode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.registerUser_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.registerUser_request)
  return false;
#undef DO_
}

void registerUser_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.registerUser_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.registerUser_request.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required string userPwd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpwd().data(), static_cast<int>(this->userpwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.registerUser_request.userPwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userpwd(), output);
  }

  // required int32 verCode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vercode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.registerUser_request)
}

::google::protobuf::uint8* registerUser_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.registerUser_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.registerUser_request.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string userPwd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpwd().data(), static_cast<int>(this->userpwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.registerUser_request.userPwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userpwd(), target);
  }

  // required int32 verCode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vercode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.registerUser_request)
  return target;
}

size_t registerUser_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.registerUser_request)
  size_t total_size = 0;

  if (has_username()) {
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_userpwd()) {
    // required string userPwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpwd());
  }

  if (has_vercode()) {
    // required int32 verCode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vercode());
  }

  return total_size;
}
size_t registerUser_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.registerUser_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required string userPwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpwd());

    // required int32 verCode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vercode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void registerUser_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.registerUser_request)
  GOOGLE_DCHECK_NE(&from, this);
  const registerUser_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const registerUser_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.registerUser_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.registerUser_request)
    MergeFrom(*source);
  }
}

void registerUser_request::MergeFrom(const registerUser_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.registerUser_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_userpwd();
      userpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpwd_);
    }
    if (cached_has_bits & 0x00000004u) {
      vercode_ = from.vercode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void registerUser_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.registerUser_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void registerUser_request::CopyFrom(const registerUser_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.registerUser_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerUser_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void registerUser_request::Swap(registerUser_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void registerUser_request::InternalSwap(registerUser_request* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userpwd_.Swap(&other->userpwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vercode_, other->vercode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata registerUser_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void registerUser_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int registerUser_response::kUserNameFieldNumber;
const int registerUser_response::kUserPwdFieldNumber;
const int registerUser_response::kVerCodeFieldNumber;
const int registerUser_response::kResCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

registerUser_response::registerUser_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_registerUser_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.registerUser_response)
}
registerUser_response::registerUser_response(const registerUser_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userpwd()) {
    userpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpwd_);
  }
  ::memcpy(&vercode_, &from.vercode_,
    static_cast<size_t>(reinterpret_cast<char*>(&rescode_) -
    reinterpret_cast<char*>(&vercode_)) + sizeof(rescode_));
  // @@protoc_insertion_point(copy_constructor:tutorial.registerUser_response)
}

void registerUser_response::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vercode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rescode_) -
      reinterpret_cast<char*>(&vercode_)) + sizeof(rescode_));
}

registerUser_response::~registerUser_response() {
  // @@protoc_insertion_point(destructor:tutorial.registerUser_response)
  SharedDtor();
}

void registerUser_response::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void registerUser_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* registerUser_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const registerUser_response& registerUser_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_registerUser_response.base);
  return *internal_default_instance();
}


void registerUser_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.registerUser_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      userpwd_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&vercode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rescode_) -
        reinterpret_cast<char*>(&vercode_)) + sizeof(rescode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool registerUser_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.registerUser_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.registerUser_response.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userPwd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpwd().data(), static_cast<int>(this->userpwd().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.registerUser_response.userPwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 verCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_vercode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vercode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 resCode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.registerUser_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.registerUser_response)
  return false;
#undef DO_
}

void registerUser_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.registerUser_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.registerUser_response.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required string userPwd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpwd().data(), static_cast<int>(this->userpwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.registerUser_response.userPwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userpwd(), output);
  }

  // optional int32 verCode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vercode(), output);
  }

  // required int32 resCode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rescode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.registerUser_response)
}

::google::protobuf::uint8* registerUser_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.registerUser_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.registerUser_response.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string userPwd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpwd().data(), static_cast<int>(this->userpwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.registerUser_response.userPwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userpwd(), target);
  }

  // optional int32 verCode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vercode(), target);
  }

  // required int32 resCode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rescode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.registerUser_response)
  return target;
}

size_t registerUser_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.registerUser_response)
  size_t total_size = 0;

  if (has_username()) {
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_userpwd()) {
    // required string userPwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpwd());
  }

  if (has_rescode()) {
    // required int32 resCode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }

  return total_size;
}
size_t registerUser_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.registerUser_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required string userPwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpwd());

    // required int32 resCode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 verCode = 3;
  if (has_vercode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vercode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void registerUser_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.registerUser_response)
  GOOGLE_DCHECK_NE(&from, this);
  const registerUser_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const registerUser_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.registerUser_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.registerUser_response)
    MergeFrom(*source);
  }
}

void registerUser_response::MergeFrom(const registerUser_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.registerUser_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_userpwd();
      userpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpwd_);
    }
    if (cached_has_bits & 0x00000004u) {
      vercode_ = from.vercode_;
    }
    if (cached_has_bits & 0x00000008u) {
      rescode_ = from.rescode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void registerUser_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.registerUser_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void registerUser_response::CopyFrom(const registerUser_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.registerUser_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerUser_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void registerUser_response::Swap(registerUser_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void registerUser_response::InternalSwap(registerUser_response* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userpwd_.Swap(&other->userpwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vercode_, other->vercode_);
  swap(rescode_, other->rescode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata registerUser_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void login_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int login_request::kUserNameFieldNumber;
const int login_request::kUserPwdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

login_request::login_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_login_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.login_request)
}
login_request::login_request(const login_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userpwd()) {
    userpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpwd_);
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.login_request)
}

void login_request::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

login_request::~login_request() {
  // @@protoc_insertion_point(destructor:tutorial.login_request)
  SharedDtor();
}

void login_request::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void login_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* login_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const login_request& login_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_login_request.base);
  return *internal_default_instance();
}


void login_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.login_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      userpwd_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool login_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.login_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.login_request.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userPwd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpwd().data(), static_cast<int>(this->userpwd().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.login_request.userPwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.login_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.login_request)
  return false;
#undef DO_
}

void login_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.login_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.login_request.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required string userPwd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpwd().data(), static_cast<int>(this->userpwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.login_request.userPwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userpwd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.login_request)
}

::google::protobuf::uint8* login_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.login_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.login_request.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string userPwd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpwd().data(), static_cast<int>(this->userpwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.login_request.userPwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userpwd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.login_request)
  return target;
}

size_t login_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.login_request)
  size_t total_size = 0;

  if (has_username()) {
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_userpwd()) {
    // required string userPwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpwd());
  }

  return total_size;
}
size_t login_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.login_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required string userPwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpwd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.login_request)
  GOOGLE_DCHECK_NE(&from, this);
  const login_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const login_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.login_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.login_request)
    MergeFrom(*source);
  }
}

void login_request::MergeFrom(const login_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.login_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_userpwd();
      userpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpwd_);
    }
  }
}

void login_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.login_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_request::CopyFrom(const login_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.login_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void login_request::Swap(login_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void login_request::InternalSwap(login_request* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userpwd_.Swap(&other->userpwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata login_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void login_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int login_response::kResCodeFieldNumber;
const int login_response::kUserNameFieldNumber;
const int login_response::kUserPwdFieldNumber;
const int login_response::kUserLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

login_response::login_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_login_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.login_response)
}
login_response::login_response(const login_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userpwd()) {
    userpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpwd_);
  }
  ::memcpy(&rescode_, &from.rescode_,
    static_cast<size_t>(reinterpret_cast<char*>(&userlevel_) -
    reinterpret_cast<char*>(&rescode_)) + sizeof(userlevel_));
  // @@protoc_insertion_point(copy_constructor:tutorial.login_response)
}

void login_response::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rescode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userlevel_) -
      reinterpret_cast<char*>(&rescode_)) + sizeof(userlevel_));
}

login_response::~login_response() {
  // @@protoc_insertion_point(destructor:tutorial.login_response)
  SharedDtor();
}

void login_response::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void login_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* login_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const login_response& login_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_login_response.base);
  return *internal_default_instance();
}


void login_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.login_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      userpwd_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&rescode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userlevel_) -
        reinterpret_cast<char*>(&rescode_)) + sizeof(userlevel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool login_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.login_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.login_response.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userPwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpwd().data(), static_cast<int>(this->userpwd().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.login_response.userPwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 userLevel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_userlevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.login_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.login_response)
  return false;
#undef DO_
}

void login_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.login_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rescode(), output);
  }

  // required string userName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.login_response.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // required string userPwd = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpwd().data(), static_cast<int>(this->userpwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.login_response.userPwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userpwd(), output);
  }

  // optional int32 userLevel = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->userlevel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.login_response)
}

::google::protobuf::uint8* login_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.login_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rescode(), target);
  }

  // required string userName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.login_response.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required string userPwd = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpwd().data(), static_cast<int>(this->userpwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.login_response.userPwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userpwd(), target);
  }

  // optional int32 userLevel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->userlevel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.login_response)
  return target;
}

size_t login_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.login_response)
  size_t total_size = 0;

  if (has_username()) {
    // required string userName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_userpwd()) {
    // required string userPwd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpwd());
  }

  if (has_rescode()) {
    // required int32 resCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }

  return total_size;
}
size_t login_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.login_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string userName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required string userPwd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpwd());

    // required int32 resCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 userLevel = 4;
  if (has_userlevel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userlevel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.login_response)
  GOOGLE_DCHECK_NE(&from, this);
  const login_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const login_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.login_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.login_response)
    MergeFrom(*source);
  }
}

void login_response::MergeFrom(const login_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.login_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_userpwd();
      userpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpwd_);
    }
    if (cached_has_bits & 0x00000004u) {
      rescode_ = from.rescode_;
    }
    if (cached_has_bits & 0x00000008u) {
      userlevel_ = from.userlevel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void login_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.login_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_response::CopyFrom(const login_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.login_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void login_response::Swap(login_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void login_response::InternalSwap(login_response* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userpwd_.Swap(&other->userpwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rescode_, other->rescode_);
  swap(userlevel_, other->userlevel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata login_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void recharge_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int recharge_request::kUserNameFieldNumber;
const int recharge_request::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

recharge_request::recharge_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_recharge_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.recharge_request)
}
recharge_request::recharge_request(const recharge_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:tutorial.recharge_request)
}

void recharge_request::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = 0;
}

recharge_request::~recharge_request() {
  // @@protoc_insertion_point(destructor:tutorial.recharge_request)
  SharedDtor();
}

void recharge_request::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void recharge_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* recharge_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const recharge_request& recharge_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_recharge_request.base);
  return *internal_default_instance();
}


void recharge_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.recharge_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  amount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool recharge_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.recharge_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.recharge_request.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.recharge_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.recharge_request)
  return false;
#undef DO_
}

void recharge_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.recharge_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.recharge_request.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required int32 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.recharge_request)
}

::google::protobuf::uint8* recharge_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.recharge_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.recharge_request.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required int32 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.recharge_request)
  return target;
}

size_t recharge_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.recharge_request)
  size_t total_size = 0;

  if (has_username()) {
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_amount()) {
    // required int32 amount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->amount());
  }

  return total_size;
}
size_t recharge_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.recharge_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required int32 amount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->amount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void recharge_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.recharge_request)
  GOOGLE_DCHECK_NE(&from, this);
  const recharge_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const recharge_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.recharge_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.recharge_request)
    MergeFrom(*source);
  }
}

void recharge_request::MergeFrom(const recharge_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.recharge_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void recharge_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.recharge_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_request::CopyFrom(const recharge_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.recharge_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void recharge_request::Swap(recharge_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void recharge_request::InternalSwap(recharge_request* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata recharge_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void recharge_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int recharge_response::kResCodeFieldNumber;
const int recharge_response::kDescFieldNumber;
const int recharge_response::kBalanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

recharge_response::recharge_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_recharge_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.recharge_response)
}
recharge_response::recharge_response(const recharge_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&rescode_, &from.rescode_,
    static_cast<size_t>(reinterpret_cast<char*>(&balance_) -
    reinterpret_cast<char*>(&rescode_)) + sizeof(balance_));
  // @@protoc_insertion_point(copy_constructor:tutorial.recharge_response)
}

void recharge_response::SharedCtor() {
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rescode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) -
      reinterpret_cast<char*>(&rescode_)) + sizeof(balance_));
}

recharge_response::~recharge_response() {
  // @@protoc_insertion_point(destructor:tutorial.recharge_response)
  SharedDtor();
}

void recharge_response::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void recharge_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* recharge_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const recharge_response& recharge_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_recharge_response.base);
  return *internal_default_instance();
}


void recharge_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.recharge_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    desc_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&rescode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&balance_) -
        reinterpret_cast<char*>(&rescode_)) + sizeof(balance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool recharge_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.recharge_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.recharge_response.desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 balance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.recharge_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.recharge_response)
  return false;
#undef DO_
}

void recharge_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.recharge_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rescode(), output);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.recharge_response.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // required int32 balance = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->balance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.recharge_response)
}

::google::protobuf::uint8* recharge_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.recharge_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rescode(), target);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.recharge_response.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // required int32 balance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->balance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.recharge_response)
  return target;
}

size_t recharge_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.recharge_response)
  size_t total_size = 0;

  if (has_rescode()) {
    // required int32 resCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }

  if (has_balance()) {
    // required int32 balance = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->balance());
  }

  return total_size;
}
size_t recharge_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.recharge_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 resCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());

    // required int32 balance = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->balance());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string desc = 2;
  if (has_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void recharge_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.recharge_response)
  GOOGLE_DCHECK_NE(&from, this);
  const recharge_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const recharge_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.recharge_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.recharge_response)
    MergeFrom(*source);
  }
}

void recharge_response::MergeFrom(const recharge_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.recharge_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      rescode_ = from.rescode_;
    }
    if (cached_has_bits & 0x00000004u) {
      balance_ = from.balance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void recharge_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.recharge_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_response::CopyFrom(const recharge_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.recharge_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void recharge_response::Swap(recharge_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void recharge_response::InternalSwap(recharge_response* other) {
  using std::swap;
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rescode_, other->rescode_);
  swap(balance_, other->balance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata recharge_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void account_balance_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int account_balance_request::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

account_balance_request::account_balance_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_account_balance_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.account_balance_request)
}
account_balance_request::account_balance_request(const account_balance_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.account_balance_request)
}

void account_balance_request::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

account_balance_request::~account_balance_request() {
  // @@protoc_insertion_point(destructor:tutorial.account_balance_request)
  SharedDtor();
}

void account_balance_request::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void account_balance_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* account_balance_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const account_balance_request& account_balance_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_account_balance_request.base);
  return *internal_default_instance();
}


void account_balance_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.account_balance_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool account_balance_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.account_balance_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.account_balance_request.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.account_balance_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.account_balance_request)
  return false;
#undef DO_
}

void account_balance_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.account_balance_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.account_balance_request.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.account_balance_request)
}

::google::protobuf::uint8* account_balance_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.account_balance_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.account_balance_request.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.account_balance_request)
  return target;
}

size_t account_balance_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.account_balance_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string userName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void account_balance_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.account_balance_request)
  GOOGLE_DCHECK_NE(&from, this);
  const account_balance_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const account_balance_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.account_balance_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.account_balance_request)
    MergeFrom(*source);
  }
}

void account_balance_request::MergeFrom(const account_balance_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.account_balance_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    set_has_username();
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void account_balance_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.account_balance_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void account_balance_request::CopyFrom(const account_balance_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.account_balance_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_balance_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void account_balance_request::Swap(account_balance_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void account_balance_request::InternalSwap(account_balance_request* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata account_balance_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void account_balance_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int account_balance_response::kResCodeFieldNumber;
const int account_balance_response::kDescFieldNumber;
const int account_balance_response::kBalanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

account_balance_response::account_balance_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_account_balance_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.account_balance_response)
}
account_balance_response::account_balance_response(const account_balance_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&rescode_, &from.rescode_,
    static_cast<size_t>(reinterpret_cast<char*>(&balance_) -
    reinterpret_cast<char*>(&rescode_)) + sizeof(balance_));
  // @@protoc_insertion_point(copy_constructor:tutorial.account_balance_response)
}

void account_balance_response::SharedCtor() {
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rescode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) -
      reinterpret_cast<char*>(&rescode_)) + sizeof(balance_));
}

account_balance_response::~account_balance_response() {
  // @@protoc_insertion_point(destructor:tutorial.account_balance_response)
  SharedDtor();
}

void account_balance_response::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void account_balance_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* account_balance_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const account_balance_response& account_balance_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_account_balance_response.base);
  return *internal_default_instance();
}


void account_balance_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.account_balance_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    desc_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&rescode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&balance_) -
        reinterpret_cast<char*>(&rescode_)) + sizeof(balance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool account_balance_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.account_balance_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.account_balance_response.desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 balance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.account_balance_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.account_balance_response)
  return false;
#undef DO_
}

void account_balance_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.account_balance_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rescode(), output);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.account_balance_response.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // required int32 balance = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->balance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.account_balance_response)
}

::google::protobuf::uint8* account_balance_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.account_balance_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rescode(), target);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.account_balance_response.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // required int32 balance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->balance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.account_balance_response)
  return target;
}

size_t account_balance_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.account_balance_response)
  size_t total_size = 0;

  if (has_rescode()) {
    // required int32 resCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }

  if (has_balance()) {
    // required int32 balance = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->balance());
  }

  return total_size;
}
size_t account_balance_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.account_balance_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 resCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());

    // required int32 balance = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->balance());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string desc = 2;
  if (has_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void account_balance_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.account_balance_response)
  GOOGLE_DCHECK_NE(&from, this);
  const account_balance_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const account_balance_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.account_balance_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.account_balance_response)
    MergeFrom(*source);
  }
}

void account_balance_response::MergeFrom(const account_balance_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.account_balance_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      rescode_ = from.rescode_;
    }
    if (cached_has_bits & 0x00000004u) {
      balance_ = from.balance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void account_balance_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.account_balance_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void account_balance_response::CopyFrom(const account_balance_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.account_balance_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_balance_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void account_balance_response::Swap(account_balance_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void account_balance_response::InternalSwap(account_balance_response* other) {
  using std::swap;
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rescode_, other->rescode_);
  swap(balance_, other->balance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata account_balance_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void broadcast_msg_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int broadcast_msg_request::kBikeIdFieldNumber;
const int broadcast_msg_request::kBikeStatusFieldNumber;
const int broadcast_msg_request::kLongitudeFieldNumber;
const int broadcast_msg_request::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

broadcast_msg_request::broadcast_msg_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_broadcast_msg_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.broadcast_msg_request)
}
broadcast_msg_request::broadcast_msg_request(const broadcast_msg_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bikeid_, &from.bikeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&bikeid_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:tutorial.broadcast_msg_request)
}

void broadcast_msg_request::SharedCtor() {
  ::memset(&bikeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&bikeid_)) + sizeof(latitude_));
}

broadcast_msg_request::~broadcast_msg_request() {
  // @@protoc_insertion_point(destructor:tutorial.broadcast_msg_request)
  SharedDtor();
}

void broadcast_msg_request::SharedDtor() {
}

void broadcast_msg_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* broadcast_msg_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const broadcast_msg_request& broadcast_msg_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_broadcast_msg_request.base);
  return *internal_default_instance();
}


void broadcast_msg_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.broadcast_msg_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&bikeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latitude_) -
        reinterpret_cast<char*>(&bikeid_)) + sizeof(latitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool broadcast_msg_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.broadcast_msg_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bikeId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bikeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bikeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bikeStatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bikestatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bikestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.broadcast_msg_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.broadcast_msg_request)
  return false;
#undef DO_
}

void broadcast_msg_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.broadcast_msg_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bikeid(), output);
  }

  // required int32 bikeStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bikestatus(), output);
  }

  // required double longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // required double latitude = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.broadcast_msg_request)
}

::google::protobuf::uint8* broadcast_msg_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.broadcast_msg_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bikeid(), target);
  }

  // required int32 bikeStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bikestatus(), target);
  }

  // required double longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // required double latitude = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.broadcast_msg_request)
  return target;
}

size_t broadcast_msg_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.broadcast_msg_request)
  size_t total_size = 0;

  if (has_bikeid()) {
    // required int32 bikeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());
  }

  if (has_bikestatus()) {
    // required int32 bikeStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikestatus());
  }

  if (has_longitude()) {
    // required double longitude = 3;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t broadcast_msg_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.broadcast_msg_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 bikeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());

    // required int32 bikeStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikestatus());

    // required double longitude = 3;
    total_size += 1 + 8;

    // required double latitude = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void broadcast_msg_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.broadcast_msg_request)
  GOOGLE_DCHECK_NE(&from, this);
  const broadcast_msg_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const broadcast_msg_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.broadcast_msg_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.broadcast_msg_request)
    MergeFrom(*source);
  }
}

void broadcast_msg_request::MergeFrom(const broadcast_msg_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.broadcast_msg_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      bikeid_ = from.bikeid_;
    }
    if (cached_has_bits & 0x00000002u) {
      bikestatus_ = from.bikestatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void broadcast_msg_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.broadcast_msg_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_msg_request::CopyFrom(const broadcast_msg_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.broadcast_msg_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_msg_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void broadcast_msg_request::Swap(broadcast_msg_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void broadcast_msg_request::InternalSwap(broadcast_msg_request* other) {
  using std::swap;
  swap(bikeid_, other->bikeid_);
  swap(bikestatus_, other->bikestatus_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata broadcast_msg_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void broadcast_msg_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int broadcast_msg_response::kBikeIdFieldNumber;
const int broadcast_msg_response::kBikeStatusFieldNumber;
const int broadcast_msg_response::kLongitudeFieldNumber;
const int broadcast_msg_response::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

broadcast_msg_response::broadcast_msg_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_broadcast_msg_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.broadcast_msg_response)
}
broadcast_msg_response::broadcast_msg_response(const broadcast_msg_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bikeid_, &from.bikeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&bikeid_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:tutorial.broadcast_msg_response)
}

void broadcast_msg_response::SharedCtor() {
  ::memset(&bikeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&bikeid_)) + sizeof(latitude_));
}

broadcast_msg_response::~broadcast_msg_response() {
  // @@protoc_insertion_point(destructor:tutorial.broadcast_msg_response)
  SharedDtor();
}

void broadcast_msg_response::SharedDtor() {
}

void broadcast_msg_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* broadcast_msg_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const broadcast_msg_response& broadcast_msg_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_broadcast_msg_response.base);
  return *internal_default_instance();
}


void broadcast_msg_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.broadcast_msg_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&bikeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latitude_) -
        reinterpret_cast<char*>(&bikeid_)) + sizeof(latitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool broadcast_msg_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.broadcast_msg_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bikeId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bikeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bikeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bikeStatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bikestatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bikestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.broadcast_msg_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.broadcast_msg_response)
  return false;
#undef DO_
}

void broadcast_msg_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.broadcast_msg_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bikeid(), output);
  }

  // required int32 bikeStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bikestatus(), output);
  }

  // required double longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // required double latitude = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.broadcast_msg_response)
}

::google::protobuf::uint8* broadcast_msg_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.broadcast_msg_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bikeid(), target);
  }

  // required int32 bikeStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bikestatus(), target);
  }

  // required double longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // required double latitude = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.broadcast_msg_response)
  return target;
}

size_t broadcast_msg_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.broadcast_msg_response)
  size_t total_size = 0;

  if (has_bikeid()) {
    // required int32 bikeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());
  }

  if (has_bikestatus()) {
    // required int32 bikeStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikestatus());
  }

  if (has_longitude()) {
    // required double longitude = 3;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t broadcast_msg_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.broadcast_msg_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 bikeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());

    // required int32 bikeStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikestatus());

    // required double longitude = 3;
    total_size += 1 + 8;

    // required double latitude = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void broadcast_msg_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.broadcast_msg_response)
  GOOGLE_DCHECK_NE(&from, this);
  const broadcast_msg_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const broadcast_msg_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.broadcast_msg_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.broadcast_msg_response)
    MergeFrom(*source);
  }
}

void broadcast_msg_response::MergeFrom(const broadcast_msg_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.broadcast_msg_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      bikeid_ = from.bikeid_;
    }
    if (cached_has_bits & 0x00000002u) {
      bikestatus_ = from.bikestatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void broadcast_msg_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.broadcast_msg_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_msg_response::CopyFrom(const broadcast_msg_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.broadcast_msg_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_msg_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void broadcast_msg_response::Swap(broadcast_msg_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void broadcast_msg_response::InternalSwap(broadcast_msg_response* other) {
  using std::swap;
  swap(bikeid_, other->bikeid_);
  swap(bikestatus_, other->bikestatus_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata broadcast_msg_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bike_scanQR_start_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bike_scanQR_start_request::kUserNameFieldNumber;
const int bike_scanQR_start_request::kBikeIdFieldNumber;
const int bike_scanQR_start_request::kTimestampFieldNumber;
const int bike_scanQR_start_request::kLongitudeFieldNumber;
const int bike_scanQR_start_request::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bike_scanQR_start_request::bike_scanQR_start_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_bike_scanQR_start_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.bike_scanQR_start_request)
}
bike_scanQR_start_request::bike_scanQR_start_request(const bike_scanQR_start_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&bikeid_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(bikeid_));
  // @@protoc_insertion_point(copy_constructor:tutorial.bike_scanQR_start_request)
}

void bike_scanQR_start_request::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bikeid_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(bikeid_));
}

bike_scanQR_start_request::~bike_scanQR_start_request() {
  // @@protoc_insertion_point(destructor:tutorial.bike_scanQR_start_request)
  SharedDtor();
}

void bike_scanQR_start_request::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void bike_scanQR_start_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bike_scanQR_start_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bike_scanQR_start_request& bike_scanQR_start_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_bike_scanQR_start_request.base);
  return *internal_default_instance();
}


void bike_scanQR_start_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.bike_scanQR_start_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bikeid_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(bikeid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bike_scanQR_start_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.bike_scanQR_start_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.bike_scanQR_start_request.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bikeId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bikeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bikeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.bike_scanQR_start_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.bike_scanQR_start_request)
  return false;
#undef DO_
}

void bike_scanQR_start_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.bike_scanQR_start_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.bike_scanQR_start_request.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required int32 bikeId = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bikeid(), output);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.bike_scanQR_start_request)
}

::google::protobuf::uint8* bike_scanQR_start_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.bike_scanQR_start_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.bike_scanQR_start_request.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required int32 bikeId = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bikeid(), target);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.bike_scanQR_start_request)
  return target;
}

size_t bike_scanQR_start_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.bike_scanQR_start_request)
  size_t total_size = 0;

  if (has_username()) {
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_timestamp()) {
    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_longitude()) {
    // required double longitude = 4;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 5;
    total_size += 1 + 8;
  }

  if (has_bikeid()) {
    // required int32 bikeId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());
  }

  return total_size;
}
size_t bike_scanQR_start_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.bike_scanQR_start_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required double longitude = 4;
    total_size += 1 + 8;

    // required double latitude = 5;
    total_size += 1 + 8;

    // required int32 bikeId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bike_scanQR_start_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.bike_scanQR_start_request)
  GOOGLE_DCHECK_NE(&from, this);
  const bike_scanQR_start_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bike_scanQR_start_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.bike_scanQR_start_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.bike_scanQR_start_request)
    MergeFrom(*source);
  }
}

void bike_scanQR_start_request::MergeFrom(const bike_scanQR_start_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.bike_scanQR_start_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      bikeid_ = from.bikeid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void bike_scanQR_start_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.bike_scanQR_start_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bike_scanQR_start_request::CopyFrom(const bike_scanQR_start_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.bike_scanQR_start_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bike_scanQR_start_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void bike_scanQR_start_request::Swap(bike_scanQR_start_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bike_scanQR_start_request::InternalSwap(bike_scanQR_start_request* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(bikeid_, other->bikeid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bike_scanQR_start_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bike_scanQR_start_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bike_scanQR_start_response::kTimestampFieldNumber;
const int bike_scanQR_start_response::kLongitudeFieldNumber;
const int bike_scanQR_start_response::kLatitudeFieldNumber;
const int bike_scanQR_start_response::kResCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bike_scanQR_start_response::bike_scanQR_start_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_bike_scanQR_start_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.bike_scanQR_start_response)
}
bike_scanQR_start_response::bike_scanQR_start_response(const bike_scanQR_start_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&rescode_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(rescode_));
  // @@protoc_insertion_point(copy_constructor:tutorial.bike_scanQR_start_response)
}

void bike_scanQR_start_response::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rescode_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(rescode_));
}

bike_scanQR_start_response::~bike_scanQR_start_response() {
  // @@protoc_insertion_point(destructor:tutorial.bike_scanQR_start_response)
  SharedDtor();
}

void bike_scanQR_start_response::SharedDtor() {
}

void bike_scanQR_start_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bike_scanQR_start_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bike_scanQR_start_response& bike_scanQR_start_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_bike_scanQR_start_response.base);
  return *internal_default_instance();
}


void bike_scanQR_start_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.bike_scanQR_start_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rescode_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(rescode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bike_scanQR_start_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.bike_scanQR_start_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 resCode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.bike_scanQR_start_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.bike_scanQR_start_response)
  return false;
#undef DO_
}

void bike_scanQR_start_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.bike_scanQR_start_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // required double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // required double latitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required int32 resCode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rescode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.bike_scanQR_start_response)
}

::google::protobuf::uint8* bike_scanQR_start_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.bike_scanQR_start_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // required double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // required double latitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // required int32 resCode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rescode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.bike_scanQR_start_response)
  return target;
}

size_t bike_scanQR_start_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.bike_scanQR_start_response)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required uint64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_longitude()) {
    // required double longitude = 2;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 3;
    total_size += 1 + 8;
  }

  if (has_rescode()) {
    // required int32 resCode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }

  return total_size;
}
size_t bike_scanQR_start_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.bike_scanQR_start_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required double longitude = 2;
    total_size += 1 + 8;

    // required double latitude = 3;
    total_size += 1 + 8;

    // required int32 resCode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bike_scanQR_start_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.bike_scanQR_start_response)
  GOOGLE_DCHECK_NE(&from, this);
  const bike_scanQR_start_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bike_scanQR_start_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.bike_scanQR_start_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.bike_scanQR_start_response)
    MergeFrom(*source);
  }
}

void bike_scanQR_start_response::MergeFrom(const bike_scanQR_start_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.bike_scanQR_start_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      rescode_ = from.rescode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void bike_scanQR_start_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.bike_scanQR_start_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bike_scanQR_start_response::CopyFrom(const bike_scanQR_start_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.bike_scanQR_start_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bike_scanQR_start_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void bike_scanQR_start_response::Swap(bike_scanQR_start_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bike_scanQR_start_response::InternalSwap(bike_scanQR_start_response* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(rescode_, other->rescode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bike_scanQR_start_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bike_scanQR_end_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bike_scanQR_end_request::kUserNameFieldNumber;
const int bike_scanQR_end_request::kBikeIdFieldNumber;
const int bike_scanQR_end_request::kTimestampFieldNumber;
const int bike_scanQR_end_request::kLongitudeFieldNumber;
const int bike_scanQR_end_request::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bike_scanQR_end_request::bike_scanQR_end_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_bike_scanQR_end_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.bike_scanQR_end_request)
}
bike_scanQR_end_request::bike_scanQR_end_request(const bike_scanQR_end_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&bikeid_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(bikeid_));
  // @@protoc_insertion_point(copy_constructor:tutorial.bike_scanQR_end_request)
}

void bike_scanQR_end_request::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bikeid_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(bikeid_));
}

bike_scanQR_end_request::~bike_scanQR_end_request() {
  // @@protoc_insertion_point(destructor:tutorial.bike_scanQR_end_request)
  SharedDtor();
}

void bike_scanQR_end_request::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void bike_scanQR_end_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bike_scanQR_end_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bike_scanQR_end_request& bike_scanQR_end_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_bike_scanQR_end_request.base);
  return *internal_default_instance();
}


void bike_scanQR_end_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.bike_scanQR_end_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bikeid_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(bikeid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bike_scanQR_end_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.bike_scanQR_end_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.bike_scanQR_end_request.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bikeId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bikeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bikeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.bike_scanQR_end_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.bike_scanQR_end_request)
  return false;
#undef DO_
}

void bike_scanQR_end_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.bike_scanQR_end_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.bike_scanQR_end_request.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required int32 bikeId = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bikeid(), output);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.bike_scanQR_end_request)
}

::google::protobuf::uint8* bike_scanQR_end_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.bike_scanQR_end_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.bike_scanQR_end_request.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required int32 bikeId = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bikeid(), target);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.bike_scanQR_end_request)
  return target;
}

size_t bike_scanQR_end_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.bike_scanQR_end_request)
  size_t total_size = 0;

  if (has_username()) {
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_timestamp()) {
    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_longitude()) {
    // required double longitude = 4;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 5;
    total_size += 1 + 8;
  }

  if (has_bikeid()) {
    // required int32 bikeId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());
  }

  return total_size;
}
size_t bike_scanQR_end_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.bike_scanQR_end_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required double longitude = 4;
    total_size += 1 + 8;

    // required double latitude = 5;
    total_size += 1 + 8;

    // required int32 bikeId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bike_scanQR_end_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.bike_scanQR_end_request)
  GOOGLE_DCHECK_NE(&from, this);
  const bike_scanQR_end_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bike_scanQR_end_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.bike_scanQR_end_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.bike_scanQR_end_request)
    MergeFrom(*source);
  }
}

void bike_scanQR_end_request::MergeFrom(const bike_scanQR_end_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.bike_scanQR_end_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      bikeid_ = from.bikeid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void bike_scanQR_end_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.bike_scanQR_end_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bike_scanQR_end_request::CopyFrom(const bike_scanQR_end_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.bike_scanQR_end_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bike_scanQR_end_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void bike_scanQR_end_request::Swap(bike_scanQR_end_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bike_scanQR_end_request::InternalSwap(bike_scanQR_end_request* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(bikeid_, other->bikeid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bike_scanQR_end_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bike_scanQR_end_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bike_scanQR_end_response::kConsumeFieldNumber;
const int bike_scanQR_end_response::kBalanceFieldNumber;
const int bike_scanQR_end_response::kTimestampFieldNumber;
const int bike_scanQR_end_response::kLongitudeFieldNumber;
const int bike_scanQR_end_response::kLatitudeFieldNumber;
const int bike_scanQR_end_response::kResCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bike_scanQR_end_response::bike_scanQR_end_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_bike_scanQR_end_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.bike_scanQR_end_response)
}
bike_scanQR_end_response::bike_scanQR_end_response(const bike_scanQR_end_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&consume_, &from.consume_,
    static_cast<size_t>(reinterpret_cast<char*>(&rescode_) -
    reinterpret_cast<char*>(&consume_)) + sizeof(rescode_));
  // @@protoc_insertion_point(copy_constructor:tutorial.bike_scanQR_end_response)
}

void bike_scanQR_end_response::SharedCtor() {
  ::memset(&consume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rescode_) -
      reinterpret_cast<char*>(&consume_)) + sizeof(rescode_));
}

bike_scanQR_end_response::~bike_scanQR_end_response() {
  // @@protoc_insertion_point(destructor:tutorial.bike_scanQR_end_response)
  SharedDtor();
}

void bike_scanQR_end_response::SharedDtor() {
}

void bike_scanQR_end_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bike_scanQR_end_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bike_scanQR_end_response& bike_scanQR_end_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_bike_scanQR_end_response.base);
  return *internal_default_instance();
}


void bike_scanQR_end_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.bike_scanQR_end_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&consume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rescode_) -
        reinterpret_cast<char*>(&consume_)) + sizeof(rescode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bike_scanQR_end_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.bike_scanQR_end_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 consume = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_consume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 balance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 resCode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.bike_scanQR_end_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.bike_scanQR_end_response)
  return false;
#undef DO_
}

void bike_scanQR_end_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.bike_scanQR_end_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 consume = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->consume(), output);
  }

  // required int32 balance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->balance(), output);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latitude(), output);
  }

  // required int32 resCode = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rescode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.bike_scanQR_end_response)
}

::google::protobuf::uint8* bike_scanQR_end_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.bike_scanQR_end_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 consume = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->consume(), target);
  }

  // required int32 balance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->balance(), target);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude(), target);
  }

  // required int32 resCode = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rescode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.bike_scanQR_end_response)
  return target;
}

size_t bike_scanQR_end_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.bike_scanQR_end_response)
  size_t total_size = 0;

  if (has_consume()) {
    // required int32 consume = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->consume());
  }

  if (has_balance()) {
    // required int32 balance = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->balance());
  }

  if (has_timestamp()) {
    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_longitude()) {
    // required double longitude = 4;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 5;
    total_size += 1 + 8;
  }

  if (has_rescode()) {
    // required int32 resCode = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }

  return total_size;
}
size_t bike_scanQR_end_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.bike_scanQR_end_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 consume = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->consume());

    // required int32 balance = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->balance());

    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required double longitude = 4;
    total_size += 1 + 8;

    // required double latitude = 5;
    total_size += 1 + 8;

    // required int32 resCode = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bike_scanQR_end_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.bike_scanQR_end_response)
  GOOGLE_DCHECK_NE(&from, this);
  const bike_scanQR_end_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bike_scanQR_end_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.bike_scanQR_end_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.bike_scanQR_end_response)
    MergeFrom(*source);
  }
}

void bike_scanQR_end_response::MergeFrom(const bike_scanQR_end_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.bike_scanQR_end_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      consume_ = from.consume_;
    }
    if (cached_has_bits & 0x00000002u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      rescode_ = from.rescode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void bike_scanQR_end_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.bike_scanQR_end_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bike_scanQR_end_response::CopyFrom(const bike_scanQR_end_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.bike_scanQR_end_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bike_scanQR_end_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void bike_scanQR_end_response::Swap(bike_scanQR_end_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bike_scanQR_end_response::InternalSwap(bike_scanQR_end_response* other) {
  using std::swap;
  swap(consume_, other->consume_);
  swap(balance_, other->balance_);
  swap(timestamp_, other->timestamp_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(rescode_, other->rescode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bike_scanQR_end_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bike_fault_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bike_fault_request::kUserNameFieldNumber;
const int bike_fault_request::kBikeIdFieldNumber;
const int bike_fault_request::kTimestampFieldNumber;
const int bike_fault_request::kLongitudeFieldNumber;
const int bike_fault_request::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bike_fault_request::bike_fault_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_bike_fault_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.bike_fault_request)
}
bike_fault_request::bike_fault_request(const bike_fault_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&bike_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(bike_id_));
  // @@protoc_insertion_point(copy_constructor:tutorial.bike_fault_request)
}

void bike_fault_request::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bike_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(bike_id_));
}

bike_fault_request::~bike_fault_request() {
  // @@protoc_insertion_point(destructor:tutorial.bike_fault_request)
  SharedDtor();
}

void bike_fault_request::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void bike_fault_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bike_fault_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bike_fault_request& bike_fault_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_bike_fault_request.base);
  return *internal_default_instance();
}


void bike_fault_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.bike_fault_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bike_id_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(bike_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bike_fault_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.bike_fault_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.bike_fault_request.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bike_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bike_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bike_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.bike_fault_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.bike_fault_request)
  return false;
#undef DO_
}

void bike_fault_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.bike_fault_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.bike_fault_request.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required uint32 bike_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bike_id(), output);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.bike_fault_request)
}

::google::protobuf::uint8* bike_fault_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.bike_fault_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.bike_fault_request.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required uint32 bike_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bike_id(), target);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.bike_fault_request)
  return target;
}

size_t bike_fault_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.bike_fault_request)
  size_t total_size = 0;

  if (has_username()) {
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_timestamp()) {
    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_longitude()) {
    // required double longitude = 4;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 5;
    total_size += 1 + 8;
  }

  if (has_bike_id()) {
    // required uint32 bike_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bike_id());
  }

  return total_size;
}
size_t bike_fault_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.bike_fault_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required double longitude = 4;
    total_size += 1 + 8;

    // required double latitude = 5;
    total_size += 1 + 8;

    // required uint32 bike_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bike_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bike_fault_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.bike_fault_request)
  GOOGLE_DCHECK_NE(&from, this);
  const bike_fault_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bike_fault_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.bike_fault_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.bike_fault_request)
    MergeFrom(*source);
  }
}

void bike_fault_request::MergeFrom(const bike_fault_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.bike_fault_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      bike_id_ = from.bike_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void bike_fault_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.bike_fault_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bike_fault_request::CopyFrom(const bike_fault_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.bike_fault_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bike_fault_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void bike_fault_request::Swap(bike_fault_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bike_fault_request::InternalSwap(bike_fault_request* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(bike_id_, other->bike_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bike_fault_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bike_fault_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bike_fault_response::kResCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bike_fault_response::bike_fault_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_bike_fault_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.bike_fault_response)
}
bike_fault_response::bike_fault_response(const bike_fault_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rescode_ = from.rescode_;
  // @@protoc_insertion_point(copy_constructor:tutorial.bike_fault_response)
}

void bike_fault_response::SharedCtor() {
  rescode_ = 0;
}

bike_fault_response::~bike_fault_response() {
  // @@protoc_insertion_point(destructor:tutorial.bike_fault_response)
  SharedDtor();
}

void bike_fault_response::SharedDtor() {
}

void bike_fault_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bike_fault_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bike_fault_response& bike_fault_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_bike_fault_response.base);
  return *internal_default_instance();
}


void bike_fault_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.bike_fault_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rescode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bike_fault_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.bike_fault_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.bike_fault_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.bike_fault_response)
  return false;
#undef DO_
}

void bike_fault_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.bike_fault_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rescode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.bike_fault_response)
}

::google::protobuf::uint8* bike_fault_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.bike_fault_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rescode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.bike_fault_response)
  return target;
}

size_t bike_fault_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.bike_fault_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 resCode = 1;
  if (has_rescode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bike_fault_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.bike_fault_response)
  GOOGLE_DCHECK_NE(&from, this);
  const bike_fault_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bike_fault_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.bike_fault_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.bike_fault_response)
    MergeFrom(*source);
  }
}

void bike_fault_response::MergeFrom(const bike_fault_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.bike_fault_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rescode()) {
    set_rescode(from.rescode());
  }
}

void bike_fault_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.bike_fault_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bike_fault_response::CopyFrom(const bike_fault_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.bike_fault_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bike_fault_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void bike_fault_response::Swap(bike_fault_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bike_fault_response::InternalSwap(bike_fault_response* other) {
  using std::swap;
  swap(rescode_, other->rescode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bike_fault_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bike_repair_finish_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bike_repair_finish_request::kUserNameFieldNumber;
const int bike_repair_finish_request::kBikeIdFieldNumber;
const int bike_repair_finish_request::kTimestampFieldNumber;
const int bike_repair_finish_request::kLongitudeFieldNumber;
const int bike_repair_finish_request::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bike_repair_finish_request::bike_repair_finish_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_bike_repair_finish_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.bike_repair_finish_request)
}
bike_repair_finish_request::bike_repair_finish_request(const bike_repair_finish_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&bike_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(bike_id_));
  // @@protoc_insertion_point(copy_constructor:tutorial.bike_repair_finish_request)
}

void bike_repair_finish_request::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bike_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(bike_id_));
}

bike_repair_finish_request::~bike_repair_finish_request() {
  // @@protoc_insertion_point(destructor:tutorial.bike_repair_finish_request)
  SharedDtor();
}

void bike_repair_finish_request::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void bike_repair_finish_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bike_repair_finish_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bike_repair_finish_request& bike_repair_finish_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_bike_repair_finish_request.base);
  return *internal_default_instance();
}


void bike_repair_finish_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.bike_repair_finish_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bike_id_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(bike_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bike_repair_finish_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.bike_repair_finish_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.bike_repair_finish_request.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bike_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bike_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bike_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.bike_repair_finish_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.bike_repair_finish_request)
  return false;
#undef DO_
}

void bike_repair_finish_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.bike_repair_finish_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.bike_repair_finish_request.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required uint32 bike_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bike_id(), output);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.bike_repair_finish_request)
}

::google::protobuf::uint8* bike_repair_finish_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.bike_repair_finish_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.bike_repair_finish_request.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required uint32 bike_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bike_id(), target);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.bike_repair_finish_request)
  return target;
}

size_t bike_repair_finish_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.bike_repair_finish_request)
  size_t total_size = 0;

  if (has_username()) {
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_timestamp()) {
    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_longitude()) {
    // required double longitude = 4;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 5;
    total_size += 1 + 8;
  }

  if (has_bike_id()) {
    // required uint32 bike_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bike_id());
  }

  return total_size;
}
size_t bike_repair_finish_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.bike_repair_finish_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required double longitude = 4;
    total_size += 1 + 8;

    // required double latitude = 5;
    total_size += 1 + 8;

    // required uint32 bike_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bike_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bike_repair_finish_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.bike_repair_finish_request)
  GOOGLE_DCHECK_NE(&from, this);
  const bike_repair_finish_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bike_repair_finish_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.bike_repair_finish_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.bike_repair_finish_request)
    MergeFrom(*source);
  }
}

void bike_repair_finish_request::MergeFrom(const bike_repair_finish_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.bike_repair_finish_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      bike_id_ = from.bike_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void bike_repair_finish_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.bike_repair_finish_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bike_repair_finish_request::CopyFrom(const bike_repair_finish_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.bike_repair_finish_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bike_repair_finish_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void bike_repair_finish_request::Swap(bike_repair_finish_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bike_repair_finish_request::InternalSwap(bike_repair_finish_request* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(bike_id_, other->bike_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bike_repair_finish_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bike_repair_finish_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bike_repair_finish_response::kResCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bike_repair_finish_response::bike_repair_finish_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_bike_repair_finish_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.bike_repair_finish_response)
}
bike_repair_finish_response::bike_repair_finish_response(const bike_repair_finish_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rescode_ = from.rescode_;
  // @@protoc_insertion_point(copy_constructor:tutorial.bike_repair_finish_response)
}

void bike_repair_finish_response::SharedCtor() {
  rescode_ = 0;
}

bike_repair_finish_response::~bike_repair_finish_response() {
  // @@protoc_insertion_point(destructor:tutorial.bike_repair_finish_response)
  SharedDtor();
}

void bike_repair_finish_response::SharedDtor() {
}

void bike_repair_finish_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bike_repair_finish_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bike_repair_finish_response& bike_repair_finish_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_bike_repair_finish_response.base);
  return *internal_default_instance();
}


void bike_repair_finish_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.bike_repair_finish_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rescode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bike_repair_finish_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.bike_repair_finish_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.bike_repair_finish_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.bike_repair_finish_response)
  return false;
#undef DO_
}

void bike_repair_finish_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.bike_repair_finish_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rescode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.bike_repair_finish_response)
}

::google::protobuf::uint8* bike_repair_finish_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.bike_repair_finish_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rescode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.bike_repair_finish_response)
  return target;
}

size_t bike_repair_finish_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.bike_repair_finish_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 resCode = 1;
  if (has_rescode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bike_repair_finish_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.bike_repair_finish_response)
  GOOGLE_DCHECK_NE(&from, this);
  const bike_repair_finish_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bike_repair_finish_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.bike_repair_finish_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.bike_repair_finish_response)
    MergeFrom(*source);
  }
}

void bike_repair_finish_response::MergeFrom(const bike_repair_finish_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.bike_repair_finish_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rescode()) {
    set_rescode(from.rescode());
  }
}

void bike_repair_finish_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.bike_repair_finish_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bike_repair_finish_response::CopyFrom(const bike_repair_finish_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.bike_repair_finish_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bike_repair_finish_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void bike_repair_finish_response::Swap(bike_repair_finish_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bike_repair_finish_response::InternalSwap(bike_repair_finish_response* other) {
  using std::swap;
  swap(rescode_, other->rescode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bike_repair_finish_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void list_all_bikeinfo_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int list_all_bikeinfo_request::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

list_all_bikeinfo_request::list_all_bikeinfo_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_list_all_bikeinfo_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.list_all_bikeinfo_request)
}
list_all_bikeinfo_request::list_all_bikeinfo_request(const list_all_bikeinfo_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.list_all_bikeinfo_request)
}

void list_all_bikeinfo_request::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

list_all_bikeinfo_request::~list_all_bikeinfo_request() {
  // @@protoc_insertion_point(destructor:tutorial.list_all_bikeinfo_request)
  SharedDtor();
}

void list_all_bikeinfo_request::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void list_all_bikeinfo_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* list_all_bikeinfo_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const list_all_bikeinfo_request& list_all_bikeinfo_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_list_all_bikeinfo_request.base);
  return *internal_default_instance();
}


void list_all_bikeinfo_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_all_bikeinfo_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool list_all_bikeinfo_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.list_all_bikeinfo_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.list_all_bikeinfo_request.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.list_all_bikeinfo_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.list_all_bikeinfo_request)
  return false;
#undef DO_
}

void list_all_bikeinfo_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.list_all_bikeinfo_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.list_all_bikeinfo_request.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.list_all_bikeinfo_request)
}

::google::protobuf::uint8* list_all_bikeinfo_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_all_bikeinfo_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.list_all_bikeinfo_request.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_all_bikeinfo_request)
  return target;
}

size_t list_all_bikeinfo_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_all_bikeinfo_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string userName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void list_all_bikeinfo_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.list_all_bikeinfo_request)
  GOOGLE_DCHECK_NE(&from, this);
  const list_all_bikeinfo_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const list_all_bikeinfo_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.list_all_bikeinfo_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.list_all_bikeinfo_request)
    MergeFrom(*source);
  }
}

void list_all_bikeinfo_request::MergeFrom(const list_all_bikeinfo_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_all_bikeinfo_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    set_has_username();
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void list_all_bikeinfo_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.list_all_bikeinfo_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_all_bikeinfo_request::CopyFrom(const list_all_bikeinfo_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_all_bikeinfo_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_all_bikeinfo_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void list_all_bikeinfo_request::Swap(list_all_bikeinfo_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void list_all_bikeinfo_request::InternalSwap(list_all_bikeinfo_request* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata list_all_bikeinfo_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void list_all_bikeinfo_response_bikeinfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int list_all_bikeinfo_response_bikeinfo::kBikeIdFieldNumber;
const int list_all_bikeinfo_response_bikeinfo::kBikeStatusFieldNumber;
const int list_all_bikeinfo_response_bikeinfo::kLongitudeFieldNumber;
const int list_all_bikeinfo_response_bikeinfo::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

list_all_bikeinfo_response_bikeinfo::list_all_bikeinfo_response_bikeinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_list_all_bikeinfo_response_bikeinfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.list_all_bikeinfo_response.bikeinfo)
}
list_all_bikeinfo_response_bikeinfo::list_all_bikeinfo_response_bikeinfo(const list_all_bikeinfo_response_bikeinfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bikeid_, &from.bikeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&bikeid_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:tutorial.list_all_bikeinfo_response.bikeinfo)
}

void list_all_bikeinfo_response_bikeinfo::SharedCtor() {
  ::memset(&bikeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&bikeid_)) + sizeof(latitude_));
}

list_all_bikeinfo_response_bikeinfo::~list_all_bikeinfo_response_bikeinfo() {
  // @@protoc_insertion_point(destructor:tutorial.list_all_bikeinfo_response.bikeinfo)
  SharedDtor();
}

void list_all_bikeinfo_response_bikeinfo::SharedDtor() {
}

void list_all_bikeinfo_response_bikeinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* list_all_bikeinfo_response_bikeinfo::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const list_all_bikeinfo_response_bikeinfo& list_all_bikeinfo_response_bikeinfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_list_all_bikeinfo_response_bikeinfo.base);
  return *internal_default_instance();
}


void list_all_bikeinfo_response_bikeinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_all_bikeinfo_response.bikeinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&bikeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latitude_) -
        reinterpret_cast<char*>(&bikeid_)) + sizeof(latitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool list_all_bikeinfo_response_bikeinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.list_all_bikeinfo_response.bikeinfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bikeId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bikeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bikeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bikeStatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bikestatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bikestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.list_all_bikeinfo_response.bikeinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.list_all_bikeinfo_response.bikeinfo)
  return false;
#undef DO_
}

void list_all_bikeinfo_response_bikeinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.list_all_bikeinfo_response.bikeinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bikeid(), output);
  }

  // required int32 bikeStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bikestatus(), output);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.list_all_bikeinfo_response.bikeinfo)
}

::google::protobuf::uint8* list_all_bikeinfo_response_bikeinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_all_bikeinfo_response.bikeinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bikeId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bikeid(), target);
  }

  // required int32 bikeStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bikestatus(), target);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_all_bikeinfo_response.bikeinfo)
  return target;
}

size_t list_all_bikeinfo_response_bikeinfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.list_all_bikeinfo_response.bikeinfo)
  size_t total_size = 0;

  if (has_bikeid()) {
    // required int32 bikeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());
  }

  if (has_bikestatus()) {
    // required int32 bikeStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikestatus());
  }

  if (has_longitude()) {
    // required double longitude = 4;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t list_all_bikeinfo_response_bikeinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_all_bikeinfo_response.bikeinfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 bikeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikeid());

    // required int32 bikeStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bikestatus());

    // required double longitude = 4;
    total_size += 1 + 8;

    // required double latitude = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void list_all_bikeinfo_response_bikeinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.list_all_bikeinfo_response.bikeinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const list_all_bikeinfo_response_bikeinfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const list_all_bikeinfo_response_bikeinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.list_all_bikeinfo_response.bikeinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.list_all_bikeinfo_response.bikeinfo)
    MergeFrom(*source);
  }
}

void list_all_bikeinfo_response_bikeinfo::MergeFrom(const list_all_bikeinfo_response_bikeinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_all_bikeinfo_response.bikeinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      bikeid_ = from.bikeid_;
    }
    if (cached_has_bits & 0x00000002u) {
      bikestatus_ = from.bikestatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void list_all_bikeinfo_response_bikeinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.list_all_bikeinfo_response.bikeinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_all_bikeinfo_response_bikeinfo::CopyFrom(const list_all_bikeinfo_response_bikeinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_all_bikeinfo_response.bikeinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_all_bikeinfo_response_bikeinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void list_all_bikeinfo_response_bikeinfo::Swap(list_all_bikeinfo_response_bikeinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void list_all_bikeinfo_response_bikeinfo::InternalSwap(list_all_bikeinfo_response_bikeinfo* other) {
  using std::swap;
  swap(bikeid_, other->bikeid_);
  swap(bikestatus_, other->bikestatus_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata list_all_bikeinfo_response_bikeinfo::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void list_all_bikeinfo_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int list_all_bikeinfo_response::kUserNameFieldNumber;
const int list_all_bikeinfo_response::kResCodeFieldNumber;
const int list_all_bikeinfo_response::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

list_all_bikeinfo_response::list_all_bikeinfo_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_list_all_bikeinfo_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.list_all_bikeinfo_response)
}
list_all_bikeinfo_response::list_all_bikeinfo_response(const list_all_bikeinfo_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  rescode_ = from.rescode_;
  // @@protoc_insertion_point(copy_constructor:tutorial.list_all_bikeinfo_response)
}

void list_all_bikeinfo_response::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rescode_ = 0;
}

list_all_bikeinfo_response::~list_all_bikeinfo_response() {
  // @@protoc_insertion_point(destructor:tutorial.list_all_bikeinfo_response)
  SharedDtor();
}

void list_all_bikeinfo_response::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void list_all_bikeinfo_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* list_all_bikeinfo_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const list_all_bikeinfo_response& list_all_bikeinfo_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_list_all_bikeinfo_response.base);
  return *internal_default_instance();
}


void list_all_bikeinfo_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_all_bikeinfo_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  rescode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool list_all_bikeinfo_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.list_all_bikeinfo_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.list_all_bikeinfo_response.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 resCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tutorial.list_all_bikeinfo_response.bikeinfo records = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.list_all_bikeinfo_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.list_all_bikeinfo_response)
  return false;
#undef DO_
}

void list_all_bikeinfo_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.list_all_bikeinfo_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.list_all_bikeinfo_response.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required int32 resCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rescode(), output);
  }

  // repeated .tutorial.list_all_bikeinfo_response.bikeinfo records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->records(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.list_all_bikeinfo_response)
}

::google::protobuf::uint8* list_all_bikeinfo_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_all_bikeinfo_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.list_all_bikeinfo_response.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required int32 resCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rescode(), target);
  }

  // repeated .tutorial.list_all_bikeinfo_response.bikeinfo records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->records(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_all_bikeinfo_response)
  return target;
}

size_t list_all_bikeinfo_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.list_all_bikeinfo_response)
  size_t total_size = 0;

  if (has_username()) {
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_rescode()) {
    // required int32 resCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }

  return total_size;
}
size_t list_all_bikeinfo_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_all_bikeinfo_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required int32 resCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .tutorial.list_all_bikeinfo_response.bikeinfo records = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->records(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void list_all_bikeinfo_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.list_all_bikeinfo_response)
  GOOGLE_DCHECK_NE(&from, this);
  const list_all_bikeinfo_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const list_all_bikeinfo_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.list_all_bikeinfo_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.list_all_bikeinfo_response)
    MergeFrom(*source);
  }
}

void list_all_bikeinfo_response::MergeFrom(const list_all_bikeinfo_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_all_bikeinfo_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      rescode_ = from.rescode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void list_all_bikeinfo_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.list_all_bikeinfo_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_all_bikeinfo_response::CopyFrom(const list_all_bikeinfo_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_all_bikeinfo_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_all_bikeinfo_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void list_all_bikeinfo_response::Swap(list_all_bikeinfo_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void list_all_bikeinfo_response::InternalSwap(list_all_bikeinfo_response* other) {
  using std::swap;
  CastToBase(&records_)->InternalSwap(CastToBase(&other->records_));
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rescode_, other->rescode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata list_all_bikeinfo_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void list_account_records_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int list_account_records_request::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

list_account_records_request::list_account_records_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_list_account_records_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.list_account_records_request)
}
list_account_records_request::list_account_records_request(const list_account_records_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.list_account_records_request)
}

void list_account_records_request::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

list_account_records_request::~list_account_records_request() {
  // @@protoc_insertion_point(destructor:tutorial.list_account_records_request)
  SharedDtor();
}

void list_account_records_request::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void list_account_records_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* list_account_records_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const list_account_records_request& list_account_records_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_list_account_records_request.base);
  return *internal_default_instance();
}


void list_account_records_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_account_records_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool list_account_records_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.list_account_records_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.list_account_records_request.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.list_account_records_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.list_account_records_request)
  return false;
#undef DO_
}

void list_account_records_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.list_account_records_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.list_account_records_request.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.list_account_records_request)
}

::google::protobuf::uint8* list_account_records_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_account_records_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.list_account_records_request.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_account_records_request)
  return target;
}

size_t list_account_records_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_account_records_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string userName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void list_account_records_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.list_account_records_request)
  GOOGLE_DCHECK_NE(&from, this);
  const list_account_records_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const list_account_records_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.list_account_records_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.list_account_records_request)
    MergeFrom(*source);
  }
}

void list_account_records_request::MergeFrom(const list_account_records_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_account_records_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    set_has_username();
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void list_account_records_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.list_account_records_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_account_records_request::CopyFrom(const list_account_records_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_account_records_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_account_records_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void list_account_records_request::Swap(list_account_records_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void list_account_records_request::InternalSwap(list_account_records_request* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata list_account_records_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void list_account_records_response_account_record::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int list_account_records_response_account_record::kTypeFieldNumber;
const int list_account_records_response_account_record::kConsumeFieldNumber;
const int list_account_records_response_account_record::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

list_account_records_response_account_record::list_account_records_response_account_record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_list_account_records_response_account_record.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.list_account_records_response.account_record)
}
list_account_records_response_account_record::list_account_records_response_account_record(const list_account_records_response_account_record& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&type_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:tutorial.list_account_records_response.account_record)
}

void list_account_records_response_account_record::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&type_)) + sizeof(timestamp_));
}

list_account_records_response_account_record::~list_account_records_response_account_record() {
  // @@protoc_insertion_point(destructor:tutorial.list_account_records_response.account_record)
  SharedDtor();
}

void list_account_records_response_account_record::SharedDtor() {
}

void list_account_records_response_account_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* list_account_records_response_account_record::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const list_account_records_response_account_record& list_account_records_response_account_record::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_list_account_records_response_account_record.base);
  return *internal_default_instance();
}


void list_account_records_response_account_record::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_account_records_response.account_record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&type_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool list_account_records_response_account_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.list_account_records_response.account_record)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 consume = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_consume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.list_account_records_response.account_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.list_account_records_response.account_record)
  return false;
#undef DO_
}

void list_account_records_response_account_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.list_account_records_response.account_record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 consume = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->consume(), output);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.list_account_records_response.account_record)
}

::google::protobuf::uint8* list_account_records_response_account_record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_account_records_response.account_record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 consume = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->consume(), target);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_account_records_response.account_record)
  return target;
}

size_t list_account_records_response_account_record::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.list_account_records_response.account_record)
  size_t total_size = 0;

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_consume()) {
    // required int32 consume = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->consume());
  }

  if (has_timestamp()) {
    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  return total_size;
}
size_t list_account_records_response_account_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_account_records_response.account_record)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 consume = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->consume());

    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void list_account_records_response_account_record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.list_account_records_response.account_record)
  GOOGLE_DCHECK_NE(&from, this);
  const list_account_records_response_account_record* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const list_account_records_response_account_record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.list_account_records_response.account_record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.list_account_records_response.account_record)
    MergeFrom(*source);
  }
}

void list_account_records_response_account_record::MergeFrom(const list_account_records_response_account_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_account_records_response.account_record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      consume_ = from.consume_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void list_account_records_response_account_record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.list_account_records_response.account_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_account_records_response_account_record::CopyFrom(const list_account_records_response_account_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_account_records_response.account_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_account_records_response_account_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void list_account_records_response_account_record::Swap(list_account_records_response_account_record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void list_account_records_response_account_record::InternalSwap(list_account_records_response_account_record* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(consume_, other->consume_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata list_account_records_response_account_record::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void list_account_records_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int list_account_records_response::kResCodeFieldNumber;
const int list_account_records_response::kDescFieldNumber;
const int list_account_records_response::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

list_account_records_response::list_account_records_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_list_account_records_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.list_account_records_response)
}
list_account_records_response::list_account_records_response(const list_account_records_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  rescode_ = from.rescode_;
  // @@protoc_insertion_point(copy_constructor:tutorial.list_account_records_response)
}

void list_account_records_response::SharedCtor() {
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rescode_ = 0;
}

list_account_records_response::~list_account_records_response() {
  // @@protoc_insertion_point(destructor:tutorial.list_account_records_response)
  SharedDtor();
}

void list_account_records_response::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void list_account_records_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* list_account_records_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const list_account_records_response& list_account_records_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_list_account_records_response.base);
  return *internal_default_instance();
}


void list_account_records_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_account_records_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    desc_.ClearNonDefaultToEmptyNoArena();
  }
  rescode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool list_account_records_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.list_account_records_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.list_account_records_response.desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tutorial.list_account_records_response.account_record records = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.list_account_records_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.list_account_records_response)
  return false;
#undef DO_
}

void list_account_records_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.list_account_records_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rescode(), output);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.list_account_records_response.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // repeated .tutorial.list_account_records_response.account_record records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->records(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.list_account_records_response)
}

::google::protobuf::uint8* list_account_records_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_account_records_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rescode(), target);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.list_account_records_response.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // repeated .tutorial.list_account_records_response.account_record records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->records(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_account_records_response)
  return target;
}

size_t list_account_records_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_account_records_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 resCode = 1;
  if (has_rescode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }
  // repeated .tutorial.list_account_records_response.account_record records = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->records(static_cast<int>(i)));
    }
  }

  // optional string desc = 2;
  if (has_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void list_account_records_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.list_account_records_response)
  GOOGLE_DCHECK_NE(&from, this);
  const list_account_records_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const list_account_records_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.list_account_records_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.list_account_records_response)
    MergeFrom(*source);
  }
}

void list_account_records_response::MergeFrom(const list_account_records_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_account_records_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      rescode_ = from.rescode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void list_account_records_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.list_account_records_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_account_records_response::CopyFrom(const list_account_records_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_account_records_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_account_records_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void list_account_records_response::Swap(list_account_records_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void list_account_records_response::InternalSwap(list_account_records_response* other) {
  using std::swap;
  CastToBase(&records_)->InternalSwap(CastToBase(&other->records_));
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rescode_, other->rescode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata list_account_records_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void list_travel_records_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int list_travel_records_request::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

list_travel_records_request::list_travel_records_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_list_travel_records_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.list_travel_records_request)
}
list_travel_records_request::list_travel_records_request(const list_travel_records_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.list_travel_records_request)
}

void list_travel_records_request::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

list_travel_records_request::~list_travel_records_request() {
  // @@protoc_insertion_point(destructor:tutorial.list_travel_records_request)
  SharedDtor();
}

void list_travel_records_request::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void list_travel_records_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* list_travel_records_request::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const list_travel_records_request& list_travel_records_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_list_travel_records_request.base);
  return *internal_default_instance();
}


void list_travel_records_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_travel_records_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool list_travel_records_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.list_travel_records_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.list_travel_records_request.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.list_travel_records_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.list_travel_records_request)
  return false;
#undef DO_
}

void list_travel_records_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.list_travel_records_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.list_travel_records_request.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.list_travel_records_request)
}

::google::protobuf::uint8* list_travel_records_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_travel_records_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.list_travel_records_request.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_travel_records_request)
  return target;
}

size_t list_travel_records_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_travel_records_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string userName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void list_travel_records_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.list_travel_records_request)
  GOOGLE_DCHECK_NE(&from, this);
  const list_travel_records_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const list_travel_records_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.list_travel_records_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.list_travel_records_request)
    MergeFrom(*source);
  }
}

void list_travel_records_request::MergeFrom(const list_travel_records_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_travel_records_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    set_has_username();
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void list_travel_records_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.list_travel_records_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_travel_records_request::CopyFrom(const list_travel_records_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_travel_records_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_travel_records_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void list_travel_records_request::Swap(list_travel_records_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void list_travel_records_request::InternalSwap(list_travel_records_request* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata list_travel_records_request::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void list_travel_records_response_travel_record::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int list_travel_records_response_travel_record::kStmFieldNumber;
const int list_travel_records_response_travel_record::kDurationFieldNumber;
const int list_travel_records_response_travel_record::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

list_travel_records_response_travel_record::list_travel_records_response_travel_record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_list_travel_records_response_travel_record.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.list_travel_records_response.travel_record)
}
list_travel_records_response_travel_record::list_travel_records_response_travel_record(const list_travel_records_response_travel_record& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stm_, &from.stm_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&stm_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:tutorial.list_travel_records_response.travel_record)
}

void list_travel_records_response_travel_record::SharedCtor() {
  ::memset(&stm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&stm_)) + sizeof(amount_));
}

list_travel_records_response_travel_record::~list_travel_records_response_travel_record() {
  // @@protoc_insertion_point(destructor:tutorial.list_travel_records_response.travel_record)
  SharedDtor();
}

void list_travel_records_response_travel_record::SharedDtor() {
}

void list_travel_records_response_travel_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* list_travel_records_response_travel_record::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const list_travel_records_response_travel_record& list_travel_records_response_travel_record::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_list_travel_records_response_travel_record.base);
  return *internal_default_instance();
}


void list_travel_records_response_travel_record::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_travel_records_response.travel_record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&stm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&amount_) -
        reinterpret_cast<char*>(&stm_)) + sizeof(amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool list_travel_records_response_travel_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.list_travel_records_response.travel_record)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 stm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_stm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.list_travel_records_response.travel_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.list_travel_records_response.travel_record)
  return false;
#undef DO_
}

void list_travel_records_response_travel_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.list_travel_records_response.travel_record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 stm = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stm(), output);
  }

  // required uint32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  // required uint32 amount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.list_travel_records_response.travel_record)
}

::google::protobuf::uint8* list_travel_records_response_travel_record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_travel_records_response.travel_record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 stm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stm(), target);
  }

  // required uint32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  // required uint32 amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_travel_records_response.travel_record)
  return target;
}

size_t list_travel_records_response_travel_record::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.list_travel_records_response.travel_record)
  size_t total_size = 0;

  if (has_stm()) {
    // required uint64 stm = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stm());
  }

  if (has_duration()) {
    // required uint32 duration = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  if (has_amount()) {
    // required uint32 amount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->amount());
  }

  return total_size;
}
size_t list_travel_records_response_travel_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_travel_records_response.travel_record)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 stm = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stm());

    // required uint32 duration = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());

    // required uint32 amount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->amount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void list_travel_records_response_travel_record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.list_travel_records_response.travel_record)
  GOOGLE_DCHECK_NE(&from, this);
  const list_travel_records_response_travel_record* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const list_travel_records_response_travel_record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.list_travel_records_response.travel_record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.list_travel_records_response.travel_record)
    MergeFrom(*source);
  }
}

void list_travel_records_response_travel_record::MergeFrom(const list_travel_records_response_travel_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_travel_records_response.travel_record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      stm_ = from.stm_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void list_travel_records_response_travel_record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.list_travel_records_response.travel_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_travel_records_response_travel_record::CopyFrom(const list_travel_records_response_travel_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_travel_records_response.travel_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_travel_records_response_travel_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void list_travel_records_response_travel_record::Swap(list_travel_records_response_travel_record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void list_travel_records_response_travel_record::InternalSwap(list_travel_records_response_travel_record* other) {
  using std::swap;
  swap(stm_, other->stm_);
  swap(duration_, other->duration_);
  swap(amount_, other->amount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata list_travel_records_response_travel_record::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void list_travel_records_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int list_travel_records_response::kResCodeFieldNumber;
const int list_travel_records_response::kDescFieldNumber;
const int list_travel_records_response::kMileageFieldNumber;
const int list_travel_records_response::kDischargeFieldNumber;
const int list_travel_records_response::kCalorieFieldNumber;
const int list_travel_records_response::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

list_travel_records_response::list_travel_records_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bike_2eproto::scc_info_list_travel_records_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.list_travel_records_response)
}
list_travel_records_response::list_travel_records_response(const list_travel_records_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&mileage_, &from.mileage_,
    static_cast<size_t>(reinterpret_cast<char*>(&rescode_) -
    reinterpret_cast<char*>(&mileage_)) + sizeof(rescode_));
  // @@protoc_insertion_point(copy_constructor:tutorial.list_travel_records_response)
}

void list_travel_records_response::SharedCtor() {
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mileage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rescode_) -
      reinterpret_cast<char*>(&mileage_)) + sizeof(rescode_));
}

list_travel_records_response::~list_travel_records_response() {
  // @@protoc_insertion_point(destructor:tutorial.list_travel_records_response)
  SharedDtor();
}

void list_travel_records_response::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void list_travel_records_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* list_travel_records_response::descriptor() {
  ::protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const list_travel_records_response& list_travel_records_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bike_2eproto::scc_info_list_travel_records_response.base);
  return *internal_default_instance();
}


void list_travel_records_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_travel_records_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    desc_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&mileage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rescode_) -
        reinterpret_cast<char*>(&mileage_)) + sizeof(rescode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool list_travel_records_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.list_travel_records_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rescode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.list_travel_records_response.desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double mileage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_mileage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mileage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double discharge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_discharge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &discharge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double calorie = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_calorie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &calorie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tutorial.list_travel_records_response.travel_record records = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.list_travel_records_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.list_travel_records_response)
  return false;
#undef DO_
}

void list_travel_records_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.list_travel_records_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rescode(), output);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.list_travel_records_response.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // required double mileage = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mileage(), output);
  }

  // required double discharge = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->discharge(), output);
  }

  // required double calorie = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->calorie(), output);
  }

  // repeated .tutorial.list_travel_records_response.travel_record records = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->records(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.list_travel_records_response)
}

::google::protobuf::uint8* list_travel_records_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_travel_records_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 resCode = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rescode(), target);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.list_travel_records_response.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // required double mileage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mileage(), target);
  }

  // required double discharge = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->discharge(), target);
  }

  // required double calorie = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->calorie(), target);
  }

  // repeated .tutorial.list_travel_records_response.travel_record records = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->records(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_travel_records_response)
  return target;
}

size_t list_travel_records_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.list_travel_records_response)
  size_t total_size = 0;

  if (has_mileage()) {
    // required double mileage = 3;
    total_size += 1 + 8;
  }

  if (has_discharge()) {
    // required double discharge = 4;
    total_size += 1 + 8;
  }

  if (has_calorie()) {
    // required double calorie = 5;
    total_size += 1 + 8;
  }

  if (has_rescode()) {
    // required int32 resCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());
  }

  return total_size;
}
size_t list_travel_records_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_travel_records_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required double mileage = 3;
    total_size += 1 + 8;

    // required double discharge = 4;
    total_size += 1 + 8;

    // required double calorie = 5;
    total_size += 1 + 8;

    // required int32 resCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rescode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .tutorial.list_travel_records_response.travel_record records = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->records(static_cast<int>(i)));
    }
  }

  // optional string desc = 2;
  if (has_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void list_travel_records_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.list_travel_records_response)
  GOOGLE_DCHECK_NE(&from, this);
  const list_travel_records_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const list_travel_records_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.list_travel_records_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.list_travel_records_response)
    MergeFrom(*source);
  }
}

void list_travel_records_response::MergeFrom(const list_travel_records_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_travel_records_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      mileage_ = from.mileage_;
    }
    if (cached_has_bits & 0x00000004u) {
      discharge_ = from.discharge_;
    }
    if (cached_has_bits & 0x00000008u) {
      calorie_ = from.calorie_;
    }
    if (cached_has_bits & 0x00000010u) {
      rescode_ = from.rescode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void list_travel_records_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.list_travel_records_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_travel_records_response::CopyFrom(const list_travel_records_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_travel_records_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_travel_records_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void list_travel_records_response::Swap(list_travel_records_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void list_travel_records_response::InternalSwap(list_travel_records_response* other) {
  using std::swap;
  CastToBase(&records_)->InternalSwap(CastToBase(&other->records_));
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mileage_, other->mileage_);
  swap(discharge_, other->discharge_);
  swap(calorie_, other->calorie_);
  swap(rescode_, other->rescode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata list_travel_records_response::GetMetadata() const {
  protobuf_bike_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bike_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tutorial
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::mobile_request* Arena::CreateMaybeMessage< ::tutorial::mobile_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::mobile_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::mobile_response* Arena::CreateMaybeMessage< ::tutorial::mobile_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::mobile_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::addBike_request* Arena::CreateMaybeMessage< ::tutorial::addBike_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::addBike_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::addBike_response* Arena::CreateMaybeMessage< ::tutorial::addBike_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::addBike_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::deleteBike_request* Arena::CreateMaybeMessage< ::tutorial::deleteBike_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::deleteBike_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::deleteBike_response* Arena::CreateMaybeMessage< ::tutorial::deleteBike_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::deleteBike_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::registerUser_request* Arena::CreateMaybeMessage< ::tutorial::registerUser_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::registerUser_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::registerUser_response* Arena::CreateMaybeMessage< ::tutorial::registerUser_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::registerUser_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::login_request* Arena::CreateMaybeMessage< ::tutorial::login_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::login_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::login_response* Arena::CreateMaybeMessage< ::tutorial::login_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::login_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::recharge_request* Arena::CreateMaybeMessage< ::tutorial::recharge_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::recharge_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::recharge_response* Arena::CreateMaybeMessage< ::tutorial::recharge_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::recharge_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::account_balance_request* Arena::CreateMaybeMessage< ::tutorial::account_balance_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::account_balance_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::account_balance_response* Arena::CreateMaybeMessage< ::tutorial::account_balance_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::account_balance_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::broadcast_msg_request* Arena::CreateMaybeMessage< ::tutorial::broadcast_msg_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::broadcast_msg_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::broadcast_msg_response* Arena::CreateMaybeMessage< ::tutorial::broadcast_msg_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::broadcast_msg_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::bike_scanQR_start_request* Arena::CreateMaybeMessage< ::tutorial::bike_scanQR_start_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::bike_scanQR_start_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::bike_scanQR_start_response* Arena::CreateMaybeMessage< ::tutorial::bike_scanQR_start_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::bike_scanQR_start_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::bike_scanQR_end_request* Arena::CreateMaybeMessage< ::tutorial::bike_scanQR_end_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::bike_scanQR_end_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::bike_scanQR_end_response* Arena::CreateMaybeMessage< ::tutorial::bike_scanQR_end_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::bike_scanQR_end_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::bike_fault_request* Arena::CreateMaybeMessage< ::tutorial::bike_fault_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::bike_fault_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::bike_fault_response* Arena::CreateMaybeMessage< ::tutorial::bike_fault_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::bike_fault_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::bike_repair_finish_request* Arena::CreateMaybeMessage< ::tutorial::bike_repair_finish_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::bike_repair_finish_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::bike_repair_finish_response* Arena::CreateMaybeMessage< ::tutorial::bike_repair_finish_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::bike_repair_finish_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::list_all_bikeinfo_request* Arena::CreateMaybeMessage< ::tutorial::list_all_bikeinfo_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::list_all_bikeinfo_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::list_all_bikeinfo_response_bikeinfo* Arena::CreateMaybeMessage< ::tutorial::list_all_bikeinfo_response_bikeinfo >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::list_all_bikeinfo_response_bikeinfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::list_all_bikeinfo_response* Arena::CreateMaybeMessage< ::tutorial::list_all_bikeinfo_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::list_all_bikeinfo_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::list_account_records_request* Arena::CreateMaybeMessage< ::tutorial::list_account_records_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::list_account_records_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::list_account_records_response_account_record* Arena::CreateMaybeMessage< ::tutorial::list_account_records_response_account_record >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::list_account_records_response_account_record >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::list_account_records_response* Arena::CreateMaybeMessage< ::tutorial::list_account_records_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::list_account_records_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::list_travel_records_request* Arena::CreateMaybeMessage< ::tutorial::list_travel_records_request >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::list_travel_records_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::list_travel_records_response_travel_record* Arena::CreateMaybeMessage< ::tutorial::list_travel_records_response_travel_record >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::list_travel_records_response_travel_record >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tutorial::list_travel_records_response* Arena::CreateMaybeMessage< ::tutorial::list_travel_records_response >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::list_travel_records_response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
